// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PhotonCommands.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PhotonCommands.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Photon {
namespace Commands {
class PhotonWrapperDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PhotonWrapper> {
} _PhotonWrapper_default_instance_;
class ConnectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Connect> {
} _Connect_default_instance_;
class Connect_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Connect_Response> {
} _Connect_Response_default_instance_;
class AuthenticateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Authenticate> {
} _Authenticate_default_instance_;
class Authenticate_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Authenticate_Response> {
} _Authenticate_Response_default_instance_;
class StartStreamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StartStream> {
} _StartStream_default_instance_;
class StreamStart_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StreamStart_Response> {
} _StreamStart_Response_default_instance_;
class HeartbeatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Heartbeat> {
} _Heartbeat_default_instance_;
class Heartbeat_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Heartbeat_Response> {
} _Heartbeat_Response_default_instance_;
class DisconnectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Disconnect> {
} _Disconnect_default_instance_;

namespace protobuf_PhotonCommands_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotonWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotonWrapper, statuscode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotonWrapper, command_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect, clientprotocolversion_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect_Response, serverprotocolversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect_Response, telemetryid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect_Response, hmackey_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authenticate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authenticate, channelid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authenticate, authkey_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authenticate_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStream, vendorname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStream, vendorversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStream, hasvideo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStream, videocodec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStream, videoheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStream, videowidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStream, videopayloadtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStream, videoingestssrc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStream, hasaudio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStream, audiocodec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStream, audiopayloadtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStream, audioingestssrc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStart_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStart_Response, ingestport_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heartbeat_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disconnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disconnect, reason_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(PhotonWrapper)},
  { 6, -1, sizeof(Connect)},
  { 11, -1, sizeof(Connect_Response)},
  { 18, -1, sizeof(Authenticate)},
  { 24, -1, sizeof(Authenticate_Response)},
  { 28, -1, sizeof(StartStream)},
  { 44, -1, sizeof(StreamStart_Response)},
  { 49, -1, sizeof(Heartbeat)},
  { 53, -1, sizeof(Heartbeat_Response)},
  { 57, -1, sizeof(Disconnect)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PhotonWrapper_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Connect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Connect_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Authenticate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Authenticate_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StartStream_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamStart_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Heartbeat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Heartbeat_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Disconnect_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "PhotonCommands.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

}  // namespace

void TableStruct::Shutdown() {
  _PhotonWrapper_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Connect_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Connect_Response_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Authenticate_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Authenticate_Response_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _StartStream_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _StreamStart_Response_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _Heartbeat_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _Heartbeat_Response_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _Disconnect_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fany_2eproto::InitDefaults();
  _PhotonWrapper_default_instance_.DefaultConstruct();
  _Connect_default_instance_.DefaultConstruct();
  _Connect_Response_default_instance_.DefaultConstruct();
  _Authenticate_default_instance_.DefaultConstruct();
  _Authenticate_Response_default_instance_.DefaultConstruct();
  _StartStream_default_instance_.DefaultConstruct();
  _StreamStart_Response_default_instance_.DefaultConstruct();
  _Heartbeat_default_instance_.DefaultConstruct();
  _Heartbeat_Response_default_instance_.DefaultConstruct();
  _Disconnect_default_instance_.DefaultConstruct();
  _PhotonWrapper_default_instance_.get_mutable()->command_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\024PhotonCommands.proto\022\017Photon.Commands\032"
      "\031google/protobuf/any.proto\"h\n\rPhotonWrap"
      "per\0220\n\nStatusCode\030\001 \001(\0162\034.Photon.Command"
      "s.StatusCodes\022%\n\007Command\030\017 \001(\0132\024.google."
      "protobuf.Any\"J\n\007Connect\022\?\n\025ClientProtoco"
      "lVersion\030\001 \001(\0162 .Photon.Commands.Protoco"
      "lVersion\"y\n\020Connect_Response\022\?\n\025ServerPr"
      "otocolVersion\030\001 \001(\0162 .Photon.Commands.Pr"
      "otocolVersion\022\023\n\013TelemetryId\030\002 \001(\004\022\017\n\007Hm"
      "acKey\030\003 \001(\t\"2\n\014Authenticate\022\021\n\tChannelId"
      "\030\001 \001(\r\022\017\n\007AuthKey\030\002 \001(\t\"\027\n\025Authenticate_"
      "Response\"\223\002\n\013StartStream\022\022\n\nVendorName\030\001"
      " \001(\t\022\025\n\rVendorVersion\030\002 \001(\t\022\020\n\010HasVideo\030"
      "\n \001(\010\022\022\n\nVideoCodec\030\013 \001(\t\022\023\n\013VideoHeight"
      "\030\014 \001(\r\022\022\n\nVideoWidth\030\r \001(\r\022\030\n\020VideoPaylo"
      "adType\030\016 \001(\r\022\027\n\017VideoIngestSSRC\030\017 \001(\r\022\020\n"
      "\010HasAudio\030\036 \001(\010\022\022\n\nAudioCodec\030\037 \001(\t\022\030\n\020A"
      "udioPayloadType\030  \001(\r\022\027\n\017AudioIngestSSRC"
      "\030! \001(\r\"*\n\024StreamStart_Response\022\022\n\nIngest"
      "Port\030\001 \001(\r\"\013\n\tHeartbeat\"\024\n\022Heartbeat_Res"
      "ponse\"@\n\nDisconnect\0222\n\006Reason\030\001 \001(\0162\".Ph"
      "oton.Commands.DisconnectReasons*#\n\017Proto"
      "colVersion\022\010\n\004NONE\020\000\022\006\n\002V1\020\001*\251\002\n\013StatusC"
      "odes\022\013\n\007UNKNOWN\020\000\022\007\n\002OK\020\310\001\022\t\n\004PING\020\311\001\022\020\n"
      "\013BAD_REQUEST\020\220\003\022\021\n\014UNAUTHORIZED\020\221\003\022\020\n\013OL"
      "D_VERSION\020\222\003\022\020\n\013NO_RESPONSE\020\223\003\022\027\n\022INVALI"
      "D_STREAM_KEY\020\226\003\022\023\n\016CHANNEL_IN_USE\020\227\003\022\027\n\022"
      "REGION_UNSUPPORTED\020\230\003\022\025\n\020NO_MEDIA_TIMEOU"
      "T\020\231\003\022\032\n\025INTERNAL_SERVER_ERROR\020\364\003\022\033\n\026INTE"
      "RNAL_COMMAND_ERROR\020\365\003\022\031\n\024INTERNAL_LOCAL_"
      "ERROR\020\366\003*\335\001\n\021DisconnectReasons\022\026\n\022DISCON"
      "NECT_UNKNOWN\020\000\022\021\n\014CLIENT_CLEAN\020\310\001\022\021\n\014ING"
      "EST_CLEAN\020\311\001\022\031\n\024CLIENT_ERROR_UNKNOWN\020\254\002\022"
      "\031\n\024CLIENT_ERROR_TIMEOUT\020\255\002\022\036\n\031CLIENT_ERR"
      "OR_BAD_RESPONSE\020\256\002\022\031\n\024INGEST_ERROR_UNKNO"
      "WN\020\220\003\022\031\n\024INGEST_ERROR_TIMEOUT\020\221\003B\nZ\010phot"
      "ongob\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1452);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PhotonCommands.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2fany_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_PhotonCommands_2eproto

const ::google::protobuf::EnumDescriptor* ProtocolVersion_descriptor() {
  protobuf_PhotonCommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhotonCommands_2eproto::file_level_enum_descriptors[0];
}
bool ProtocolVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StatusCodes_descriptor() {
  protobuf_PhotonCommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhotonCommands_2eproto::file_level_enum_descriptors[1];
}
bool StatusCodes_IsValid(int value) {
  switch (value) {
    case 0:
    case 200:
    case 201:
    case 400:
    case 401:
    case 402:
    case 403:
    case 406:
    case 407:
    case 408:
    case 409:
    case 500:
    case 501:
    case 502:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DisconnectReasons_descriptor() {
  protobuf_PhotonCommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhotonCommands_2eproto::file_level_enum_descriptors[2];
}
bool DisconnectReasons_IsValid(int value) {
  switch (value) {
    case 0:
    case 200:
    case 201:
    case 300:
    case 301:
    case 302:
    case 400:
    case 401:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhotonWrapper::kStatusCodeFieldNumber;
const int PhotonWrapper::kCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhotonWrapper::PhotonWrapper()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhotonCommands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Photon.Commands.PhotonWrapper)
}
PhotonWrapper::PhotonWrapper(const PhotonWrapper& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_command()) {
    command_ = new ::google::protobuf::Any(*from.command_);
  } else {
    command_ = NULL;
  }
  statuscode_ = from.statuscode_;
  // @@protoc_insertion_point(copy_constructor:Photon.Commands.PhotonWrapper)
}

void PhotonWrapper::SharedCtor() {
  ::memset(&command_, 0, reinterpret_cast<char*>(&statuscode_) -
    reinterpret_cast<char*>(&command_) + sizeof(statuscode_));
  _cached_size_ = 0;
}

PhotonWrapper::~PhotonWrapper() {
  // @@protoc_insertion_point(destructor:Photon.Commands.PhotonWrapper)
  SharedDtor();
}

void PhotonWrapper::SharedDtor() {
  if (this != internal_default_instance()) {
    delete command_;
  }
}

void PhotonWrapper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhotonWrapper::descriptor() {
  protobuf_PhotonCommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhotonCommands_2eproto::file_level_metadata[0].descriptor;
}

const PhotonWrapper& PhotonWrapper::default_instance() {
  protobuf_PhotonCommands_2eproto::InitDefaults();
  return *internal_default_instance();
}

PhotonWrapper* PhotonWrapper::New(::google::protobuf::Arena* arena) const {
  PhotonWrapper* n = new PhotonWrapper;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PhotonWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:Photon.Commands.PhotonWrapper)
  if (GetArenaNoVirtual() == NULL && command_ != NULL) {
    delete command_;
  }
  command_ = NULL;
  statuscode_ = 0;
}

bool PhotonWrapper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Photon.Commands.PhotonWrapper)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Photon.Commands.StatusCodes StatusCode = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_statuscode(static_cast< ::Photon::Commands::StatusCodes >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any Command = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Photon.Commands.PhotonWrapper)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Photon.Commands.PhotonWrapper)
  return false;
#undef DO_
}

void PhotonWrapper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Photon.Commands.PhotonWrapper)
  // .Photon.Commands.StatusCodes StatusCode = 1;
  if (this->statuscode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->statuscode(), output);
  }

  // .google.protobuf.Any Command = 15;
  if (this->has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->command_, output);
  }

  // @@protoc_insertion_point(serialize_end:Photon.Commands.PhotonWrapper)
}

::google::protobuf::uint8* PhotonWrapper::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Photon.Commands.PhotonWrapper)
  // .Photon.Commands.StatusCodes StatusCode = 1;
  if (this->statuscode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->statuscode(), target);
  }

  // .google.protobuf.Any Command = 15;
  if (this->has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->command_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Photon.Commands.PhotonWrapper)
  return target;
}

size_t PhotonWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Photon.Commands.PhotonWrapper)
  size_t total_size = 0;

  // .google.protobuf.Any Command = 15;
  if (this->has_command()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->command_);
  }

  // .Photon.Commands.StatusCodes StatusCode = 1;
  if (this->statuscode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->statuscode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhotonWrapper::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Photon.Commands.PhotonWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  const PhotonWrapper* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PhotonWrapper>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Photon.Commands.PhotonWrapper)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Photon.Commands.PhotonWrapper)
    MergeFrom(*source);
  }
}

void PhotonWrapper::MergeFrom(const PhotonWrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Photon.Commands.PhotonWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_command()) {
    mutable_command()->::google::protobuf::Any::MergeFrom(from.command());
  }
  if (from.statuscode() != 0) {
    set_statuscode(from.statuscode());
  }
}

void PhotonWrapper::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Photon.Commands.PhotonWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhotonWrapper::CopyFrom(const PhotonWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Photon.Commands.PhotonWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhotonWrapper::IsInitialized() const {
  return true;
}

void PhotonWrapper::Swap(PhotonWrapper* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhotonWrapper::InternalSwap(PhotonWrapper* other) {
  std::swap(command_, other->command_);
  std::swap(statuscode_, other->statuscode_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PhotonWrapper::GetMetadata() const {
  protobuf_PhotonCommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhotonCommands_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PhotonWrapper

// .Photon.Commands.StatusCodes StatusCode = 1;
void PhotonWrapper::clear_statuscode() {
  statuscode_ = 0;
}
::Photon::Commands::StatusCodes PhotonWrapper::statuscode() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.PhotonWrapper.StatusCode)
  return static_cast< ::Photon::Commands::StatusCodes >(statuscode_);
}
void PhotonWrapper::set_statuscode(::Photon::Commands::StatusCodes value) {
  
  statuscode_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.PhotonWrapper.StatusCode)
}

// .google.protobuf.Any Command = 15;
bool PhotonWrapper::has_command() const {
  return this != internal_default_instance() && command_ != NULL;
}
void PhotonWrapper::clear_command() {
  if (GetArenaNoVirtual() == NULL && command_ != NULL) delete command_;
  command_ = NULL;
}
const ::google::protobuf::Any& PhotonWrapper::command() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.PhotonWrapper.Command)
  return command_ != NULL ? *command_
                         : *::google::protobuf::Any::internal_default_instance();
}
::google::protobuf::Any* PhotonWrapper::mutable_command() {
  
  if (command_ == NULL) {
    command_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:Photon.Commands.PhotonWrapper.Command)
  return command_;
}
::google::protobuf::Any* PhotonWrapper::release_command() {
  // @@protoc_insertion_point(field_release:Photon.Commands.PhotonWrapper.Command)
  
  ::google::protobuf::Any* temp = command_;
  command_ = NULL;
  return temp;
}
void PhotonWrapper::set_allocated_command(::google::protobuf::Any* command) {
  delete command_;
  command_ = command;
  if (command) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Photon.Commands.PhotonWrapper.Command)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Connect::kClientProtocolVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Connect::Connect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhotonCommands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Photon.Commands.Connect)
}
Connect::Connect(const Connect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientprotocolversion_ = from.clientprotocolversion_;
  // @@protoc_insertion_point(copy_constructor:Photon.Commands.Connect)
}

void Connect::SharedCtor() {
  clientprotocolversion_ = 0;
  _cached_size_ = 0;
}

Connect::~Connect() {
  // @@protoc_insertion_point(destructor:Photon.Commands.Connect)
  SharedDtor();
}

void Connect::SharedDtor() {
}

void Connect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Connect::descriptor() {
  protobuf_PhotonCommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhotonCommands_2eproto::file_level_metadata[1].descriptor;
}

const Connect& Connect::default_instance() {
  protobuf_PhotonCommands_2eproto::InitDefaults();
  return *internal_default_instance();
}

Connect* Connect::New(::google::protobuf::Arena* arena) const {
  Connect* n = new Connect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Connect::Clear() {
// @@protoc_insertion_point(message_clear_start:Photon.Commands.Connect)
  clientprotocolversion_ = 0;
}

bool Connect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Photon.Commands.Connect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Photon.Commands.ProtocolVersion ClientProtocolVersion = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_clientprotocolversion(static_cast< ::Photon::Commands::ProtocolVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Photon.Commands.Connect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Photon.Commands.Connect)
  return false;
#undef DO_
}

void Connect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Photon.Commands.Connect)
  // .Photon.Commands.ProtocolVersion ClientProtocolVersion = 1;
  if (this->clientprotocolversion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->clientprotocolversion(), output);
  }

  // @@protoc_insertion_point(serialize_end:Photon.Commands.Connect)
}

::google::protobuf::uint8* Connect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Photon.Commands.Connect)
  // .Photon.Commands.ProtocolVersion ClientProtocolVersion = 1;
  if (this->clientprotocolversion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->clientprotocolversion(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Photon.Commands.Connect)
  return target;
}

size_t Connect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Photon.Commands.Connect)
  size_t total_size = 0;

  // .Photon.Commands.ProtocolVersion ClientProtocolVersion = 1;
  if (this->clientprotocolversion() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->clientprotocolversion());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Connect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Photon.Commands.Connect)
  GOOGLE_DCHECK_NE(&from, this);
  const Connect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Connect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Photon.Commands.Connect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Photon.Commands.Connect)
    MergeFrom(*source);
  }
}

void Connect::MergeFrom(const Connect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Photon.Commands.Connect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.clientprotocolversion() != 0) {
    set_clientprotocolversion(from.clientprotocolversion());
  }
}

void Connect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Photon.Commands.Connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Connect::CopyFrom(const Connect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Photon.Commands.Connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connect::IsInitialized() const {
  return true;
}

void Connect::Swap(Connect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Connect::InternalSwap(Connect* other) {
  std::swap(clientprotocolversion_, other->clientprotocolversion_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Connect::GetMetadata() const {
  protobuf_PhotonCommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhotonCommands_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Connect

// .Photon.Commands.ProtocolVersion ClientProtocolVersion = 1;
void Connect::clear_clientprotocolversion() {
  clientprotocolversion_ = 0;
}
::Photon::Commands::ProtocolVersion Connect::clientprotocolversion() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.Connect.ClientProtocolVersion)
  return static_cast< ::Photon::Commands::ProtocolVersion >(clientprotocolversion_);
}
void Connect::set_clientprotocolversion(::Photon::Commands::ProtocolVersion value) {
  
  clientprotocolversion_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.Connect.ClientProtocolVersion)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Connect_Response::kServerProtocolVersionFieldNumber;
const int Connect_Response::kTelemetryIdFieldNumber;
const int Connect_Response::kHmacKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Connect_Response::Connect_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhotonCommands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Photon.Commands.Connect_Response)
}
Connect_Response::Connect_Response(const Connect_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hmackey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hmackey().size() > 0) {
    hmackey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hmackey_);
  }
  ::memcpy(&telemetryid_, &from.telemetryid_,
    reinterpret_cast<char*>(&serverprotocolversion_) -
    reinterpret_cast<char*>(&telemetryid_) + sizeof(serverprotocolversion_));
  // @@protoc_insertion_point(copy_constructor:Photon.Commands.Connect_Response)
}

void Connect_Response::SharedCtor() {
  hmackey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&telemetryid_, 0, reinterpret_cast<char*>(&serverprotocolversion_) -
    reinterpret_cast<char*>(&telemetryid_) + sizeof(serverprotocolversion_));
  _cached_size_ = 0;
}

Connect_Response::~Connect_Response() {
  // @@protoc_insertion_point(destructor:Photon.Commands.Connect_Response)
  SharedDtor();
}

void Connect_Response::SharedDtor() {
  hmackey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Connect_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Connect_Response::descriptor() {
  protobuf_PhotonCommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhotonCommands_2eproto::file_level_metadata[2].descriptor;
}

const Connect_Response& Connect_Response::default_instance() {
  protobuf_PhotonCommands_2eproto::InitDefaults();
  return *internal_default_instance();
}

Connect_Response* Connect_Response::New(::google::protobuf::Arena* arena) const {
  Connect_Response* n = new Connect_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Connect_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Photon.Commands.Connect_Response)
  hmackey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&telemetryid_, 0, reinterpret_cast<char*>(&serverprotocolversion_) -
    reinterpret_cast<char*>(&telemetryid_) + sizeof(serverprotocolversion_));
}

bool Connect_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Photon.Commands.Connect_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Photon.Commands.ProtocolVersion ServerProtocolVersion = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_serverprotocolversion(static_cast< ::Photon::Commands::ProtocolVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 TelemetryId = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &telemetryid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string HmacKey = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hmackey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hmackey().data(), this->hmackey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Photon.Commands.Connect_Response.HmacKey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Photon.Commands.Connect_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Photon.Commands.Connect_Response)
  return false;
#undef DO_
}

void Connect_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Photon.Commands.Connect_Response)
  // .Photon.Commands.ProtocolVersion ServerProtocolVersion = 1;
  if (this->serverprotocolversion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->serverprotocolversion(), output);
  }

  // uint64 TelemetryId = 2;
  if (this->telemetryid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->telemetryid(), output);
  }

  // string HmacKey = 3;
  if (this->hmackey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hmackey().data(), this->hmackey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Photon.Commands.Connect_Response.HmacKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hmackey(), output);
  }

  // @@protoc_insertion_point(serialize_end:Photon.Commands.Connect_Response)
}

::google::protobuf::uint8* Connect_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Photon.Commands.Connect_Response)
  // .Photon.Commands.ProtocolVersion ServerProtocolVersion = 1;
  if (this->serverprotocolversion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->serverprotocolversion(), target);
  }

  // uint64 TelemetryId = 2;
  if (this->telemetryid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->telemetryid(), target);
  }

  // string HmacKey = 3;
  if (this->hmackey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hmackey().data(), this->hmackey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Photon.Commands.Connect_Response.HmacKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hmackey(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Photon.Commands.Connect_Response)
  return target;
}

size_t Connect_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Photon.Commands.Connect_Response)
  size_t total_size = 0;

  // string HmacKey = 3;
  if (this->hmackey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hmackey());
  }

  // uint64 TelemetryId = 2;
  if (this->telemetryid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->telemetryid());
  }

  // .Photon.Commands.ProtocolVersion ServerProtocolVersion = 1;
  if (this->serverprotocolversion() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->serverprotocolversion());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Connect_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Photon.Commands.Connect_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Connect_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Connect_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Photon.Commands.Connect_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Photon.Commands.Connect_Response)
    MergeFrom(*source);
  }
}

void Connect_Response::MergeFrom(const Connect_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Photon.Commands.Connect_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.hmackey().size() > 0) {

    hmackey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hmackey_);
  }
  if (from.telemetryid() != 0) {
    set_telemetryid(from.telemetryid());
  }
  if (from.serverprotocolversion() != 0) {
    set_serverprotocolversion(from.serverprotocolversion());
  }
}

void Connect_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Photon.Commands.Connect_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Connect_Response::CopyFrom(const Connect_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Photon.Commands.Connect_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connect_Response::IsInitialized() const {
  return true;
}

void Connect_Response::Swap(Connect_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Connect_Response::InternalSwap(Connect_Response* other) {
  hmackey_.Swap(&other->hmackey_);
  std::swap(telemetryid_, other->telemetryid_);
  std::swap(serverprotocolversion_, other->serverprotocolversion_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Connect_Response::GetMetadata() const {
  protobuf_PhotonCommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhotonCommands_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Connect_Response

// .Photon.Commands.ProtocolVersion ServerProtocolVersion = 1;
void Connect_Response::clear_serverprotocolversion() {
  serverprotocolversion_ = 0;
}
::Photon::Commands::ProtocolVersion Connect_Response::serverprotocolversion() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.Connect_Response.ServerProtocolVersion)
  return static_cast< ::Photon::Commands::ProtocolVersion >(serverprotocolversion_);
}
void Connect_Response::set_serverprotocolversion(::Photon::Commands::ProtocolVersion value) {
  
  serverprotocolversion_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.Connect_Response.ServerProtocolVersion)
}

// uint64 TelemetryId = 2;
void Connect_Response::clear_telemetryid() {
  telemetryid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Connect_Response::telemetryid() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.Connect_Response.TelemetryId)
  return telemetryid_;
}
void Connect_Response::set_telemetryid(::google::protobuf::uint64 value) {
  
  telemetryid_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.Connect_Response.TelemetryId)
}

// string HmacKey = 3;
void Connect_Response::clear_hmackey() {
  hmackey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Connect_Response::hmackey() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.Connect_Response.HmacKey)
  return hmackey_.GetNoArena();
}
void Connect_Response::set_hmackey(const ::std::string& value) {
  
  hmackey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Photon.Commands.Connect_Response.HmacKey)
}
#if LANG_CXX11
void Connect_Response::set_hmackey(::std::string&& value) {
  
  hmackey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Photon.Commands.Connect_Response.HmacKey)
}
#endif
void Connect_Response::set_hmackey(const char* value) {
  
  hmackey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Photon.Commands.Connect_Response.HmacKey)
}
void Connect_Response::set_hmackey(const char* value, size_t size) {
  
  hmackey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Photon.Commands.Connect_Response.HmacKey)
}
::std::string* Connect_Response::mutable_hmackey() {
  
  // @@protoc_insertion_point(field_mutable:Photon.Commands.Connect_Response.HmacKey)
  return hmackey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Connect_Response::release_hmackey() {
  // @@protoc_insertion_point(field_release:Photon.Commands.Connect_Response.HmacKey)
  
  return hmackey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Connect_Response::set_allocated_hmackey(::std::string* hmackey) {
  if (hmackey != NULL) {
    
  } else {
    
  }
  hmackey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hmackey);
  // @@protoc_insertion_point(field_set_allocated:Photon.Commands.Connect_Response.HmacKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Authenticate::kChannelIdFieldNumber;
const int Authenticate::kAuthKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Authenticate::Authenticate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhotonCommands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Photon.Commands.Authenticate)
}
Authenticate::Authenticate(const Authenticate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  authkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.authkey().size() > 0) {
    authkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authkey_);
  }
  channelid_ = from.channelid_;
  // @@protoc_insertion_point(copy_constructor:Photon.Commands.Authenticate)
}

void Authenticate::SharedCtor() {
  authkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_ = 0u;
  _cached_size_ = 0;
}

Authenticate::~Authenticate() {
  // @@protoc_insertion_point(destructor:Photon.Commands.Authenticate)
  SharedDtor();
}

void Authenticate::SharedDtor() {
  authkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Authenticate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Authenticate::descriptor() {
  protobuf_PhotonCommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhotonCommands_2eproto::file_level_metadata[3].descriptor;
}

const Authenticate& Authenticate::default_instance() {
  protobuf_PhotonCommands_2eproto::InitDefaults();
  return *internal_default_instance();
}

Authenticate* Authenticate::New(::google::protobuf::Arena* arena) const {
  Authenticate* n = new Authenticate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Authenticate::Clear() {
// @@protoc_insertion_point(message_clear_start:Photon.Commands.Authenticate)
  authkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_ = 0u;
}

bool Authenticate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Photon.Commands.Authenticate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 ChannelId = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string AuthKey = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->authkey().data(), this->authkey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Photon.Commands.Authenticate.AuthKey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Photon.Commands.Authenticate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Photon.Commands.Authenticate)
  return false;
#undef DO_
}

void Authenticate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Photon.Commands.Authenticate)
  // uint32 ChannelId = 1;
  if (this->channelid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channelid(), output);
  }

  // string AuthKey = 2;
  if (this->authkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Photon.Commands.Authenticate.AuthKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->authkey(), output);
  }

  // @@protoc_insertion_point(serialize_end:Photon.Commands.Authenticate)
}

::google::protobuf::uint8* Authenticate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Photon.Commands.Authenticate)
  // uint32 ChannelId = 1;
  if (this->channelid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channelid(), target);
  }

  // string AuthKey = 2;
  if (this->authkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Photon.Commands.Authenticate.AuthKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->authkey(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Photon.Commands.Authenticate)
  return target;
}

size_t Authenticate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Photon.Commands.Authenticate)
  size_t total_size = 0;

  // string AuthKey = 2;
  if (this->authkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->authkey());
  }

  // uint32 ChannelId = 1;
  if (this->channelid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channelid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Authenticate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Photon.Commands.Authenticate)
  GOOGLE_DCHECK_NE(&from, this);
  const Authenticate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Authenticate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Photon.Commands.Authenticate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Photon.Commands.Authenticate)
    MergeFrom(*source);
  }
}

void Authenticate::MergeFrom(const Authenticate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Photon.Commands.Authenticate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.authkey().size() > 0) {

    authkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authkey_);
  }
  if (from.channelid() != 0) {
    set_channelid(from.channelid());
  }
}

void Authenticate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Photon.Commands.Authenticate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authenticate::CopyFrom(const Authenticate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Photon.Commands.Authenticate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authenticate::IsInitialized() const {
  return true;
}

void Authenticate::Swap(Authenticate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Authenticate::InternalSwap(Authenticate* other) {
  authkey_.Swap(&other->authkey_);
  std::swap(channelid_, other->channelid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Authenticate::GetMetadata() const {
  protobuf_PhotonCommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhotonCommands_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Authenticate

// uint32 ChannelId = 1;
void Authenticate::clear_channelid() {
  channelid_ = 0u;
}
::google::protobuf::uint32 Authenticate::channelid() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.Authenticate.ChannelId)
  return channelid_;
}
void Authenticate::set_channelid(::google::protobuf::uint32 value) {
  
  channelid_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.Authenticate.ChannelId)
}

// string AuthKey = 2;
void Authenticate::clear_authkey() {
  authkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Authenticate::authkey() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.Authenticate.AuthKey)
  return authkey_.GetNoArena();
}
void Authenticate::set_authkey(const ::std::string& value) {
  
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Photon.Commands.Authenticate.AuthKey)
}
#if LANG_CXX11
void Authenticate::set_authkey(::std::string&& value) {
  
  authkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Photon.Commands.Authenticate.AuthKey)
}
#endif
void Authenticate::set_authkey(const char* value) {
  
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Photon.Commands.Authenticate.AuthKey)
}
void Authenticate::set_authkey(const char* value, size_t size) {
  
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Photon.Commands.Authenticate.AuthKey)
}
::std::string* Authenticate::mutable_authkey() {
  
  // @@protoc_insertion_point(field_mutable:Photon.Commands.Authenticate.AuthKey)
  return authkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Authenticate::release_authkey() {
  // @@protoc_insertion_point(field_release:Photon.Commands.Authenticate.AuthKey)
  
  return authkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Authenticate::set_allocated_authkey(::std::string* authkey) {
  if (authkey != NULL) {
    
  } else {
    
  }
  authkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authkey);
  // @@protoc_insertion_point(field_set_allocated:Photon.Commands.Authenticate.AuthKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Authenticate_Response::Authenticate_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhotonCommands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Photon.Commands.Authenticate_Response)
}
Authenticate_Response::Authenticate_Response(const Authenticate_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Photon.Commands.Authenticate_Response)
}

void Authenticate_Response::SharedCtor() {
  _cached_size_ = 0;
}

Authenticate_Response::~Authenticate_Response() {
  // @@protoc_insertion_point(destructor:Photon.Commands.Authenticate_Response)
  SharedDtor();
}

void Authenticate_Response::SharedDtor() {
}

void Authenticate_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Authenticate_Response::descriptor() {
  protobuf_PhotonCommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhotonCommands_2eproto::file_level_metadata[4].descriptor;
}

const Authenticate_Response& Authenticate_Response::default_instance() {
  protobuf_PhotonCommands_2eproto::InitDefaults();
  return *internal_default_instance();
}

Authenticate_Response* Authenticate_Response::New(::google::protobuf::Arena* arena) const {
  Authenticate_Response* n = new Authenticate_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Authenticate_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Photon.Commands.Authenticate_Response)
}

bool Authenticate_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Photon.Commands.Authenticate_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:Photon.Commands.Authenticate_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Photon.Commands.Authenticate_Response)
  return false;
#undef DO_
}

void Authenticate_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Photon.Commands.Authenticate_Response)
  // @@protoc_insertion_point(serialize_end:Photon.Commands.Authenticate_Response)
}

::google::protobuf::uint8* Authenticate_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Photon.Commands.Authenticate_Response)
  // @@protoc_insertion_point(serialize_to_array_end:Photon.Commands.Authenticate_Response)
  return target;
}

size_t Authenticate_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Photon.Commands.Authenticate_Response)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Authenticate_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Photon.Commands.Authenticate_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Authenticate_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Authenticate_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Photon.Commands.Authenticate_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Photon.Commands.Authenticate_Response)
    MergeFrom(*source);
  }
}

void Authenticate_Response::MergeFrom(const Authenticate_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Photon.Commands.Authenticate_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void Authenticate_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Photon.Commands.Authenticate_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authenticate_Response::CopyFrom(const Authenticate_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Photon.Commands.Authenticate_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authenticate_Response::IsInitialized() const {
  return true;
}

void Authenticate_Response::Swap(Authenticate_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Authenticate_Response::InternalSwap(Authenticate_Response* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Authenticate_Response::GetMetadata() const {
  protobuf_PhotonCommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhotonCommands_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Authenticate_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartStream::kVendorNameFieldNumber;
const int StartStream::kVendorVersionFieldNumber;
const int StartStream::kHasVideoFieldNumber;
const int StartStream::kVideoCodecFieldNumber;
const int StartStream::kVideoHeightFieldNumber;
const int StartStream::kVideoWidthFieldNumber;
const int StartStream::kVideoPayloadTypeFieldNumber;
const int StartStream::kVideoIngestSSRCFieldNumber;
const int StartStream::kHasAudioFieldNumber;
const int StartStream::kAudioCodecFieldNumber;
const int StartStream::kAudioPayloadTypeFieldNumber;
const int StartStream::kAudioIngestSSRCFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartStream::StartStream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhotonCommands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Photon.Commands.StartStream)
}
StartStream::StartStream(const StartStream& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vendorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vendorname().size() > 0) {
    vendorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendorname_);
  }
  vendorversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vendorversion().size() > 0) {
    vendorversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendorversion_);
  }
  videocodec_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.videocodec().size() > 0) {
    videocodec_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.videocodec_);
  }
  audiocodec_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.audiocodec().size() > 0) {
    audiocodec_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audiocodec_);
  }
  ::memcpy(&videoheight_, &from.videoheight_,
    reinterpret_cast<char*>(&audioingestssrc_) -
    reinterpret_cast<char*>(&videoheight_) + sizeof(audioingestssrc_));
  // @@protoc_insertion_point(copy_constructor:Photon.Commands.StartStream)
}

void StartStream::SharedCtor() {
  vendorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendorversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  videocodec_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audiocodec_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&videoheight_, 0, reinterpret_cast<char*>(&audioingestssrc_) -
    reinterpret_cast<char*>(&videoheight_) + sizeof(audioingestssrc_));
  _cached_size_ = 0;
}

StartStream::~StartStream() {
  // @@protoc_insertion_point(destructor:Photon.Commands.StartStream)
  SharedDtor();
}

void StartStream::SharedDtor() {
  vendorname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendorversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  videocodec_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audiocodec_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StartStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartStream::descriptor() {
  protobuf_PhotonCommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhotonCommands_2eproto::file_level_metadata[5].descriptor;
}

const StartStream& StartStream::default_instance() {
  protobuf_PhotonCommands_2eproto::InitDefaults();
  return *internal_default_instance();
}

StartStream* StartStream::New(::google::protobuf::Arena* arena) const {
  StartStream* n = new StartStream;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartStream::Clear() {
// @@protoc_insertion_point(message_clear_start:Photon.Commands.StartStream)
  vendorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendorversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  videocodec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audiocodec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&videoheight_, 0, reinterpret_cast<char*>(&audioingestssrc_) -
    reinterpret_cast<char*>(&videoheight_) + sizeof(audioingestssrc_));
}

bool StartStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Photon.Commands.StartStream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string VendorName = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendorname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vendorname().data(), this->vendorname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Photon.Commands.StartStream.VendorName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string VendorVersion = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendorversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vendorversion().data(), this->vendorversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Photon.Commands.StartStream.VendorVersion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool HasVideo = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasvideo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string VideoCodec = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_videocodec()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->videocodec().data(), this->videocodec().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Photon.Commands.StartStream.VideoCodec"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 VideoHeight = 12;
      case 12: {
        if (tag == 96u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videoheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 VideoWidth = 13;
      case 13: {
        if (tag == 104u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videowidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 VideoPayloadType = 14;
      case 14: {
        if (tag == 112u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videopayloadtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 VideoIngestSSRC = 15;
      case 15: {
        if (tag == 120u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videoingestssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool HasAudio = 30;
      case 30: {
        if (tag == 240u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasaudio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string AudioCodec = 31;
      case 31: {
        if (tag == 250u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audiocodec()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->audiocodec().data(), this->audiocodec().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Photon.Commands.StartStream.AudioCodec"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 AudioPayloadType = 32;
      case 32: {
        if (tag == 256u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiopayloadtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 AudioIngestSSRC = 33;
      case 33: {
        if (tag == 264u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audioingestssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Photon.Commands.StartStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Photon.Commands.StartStream)
  return false;
#undef DO_
}

void StartStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Photon.Commands.StartStream)
  // string VendorName = 1;
  if (this->vendorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vendorname().data(), this->vendorname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Photon.Commands.StartStream.VendorName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vendorname(), output);
  }

  // string VendorVersion = 2;
  if (this->vendorversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vendorversion().data(), this->vendorversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Photon.Commands.StartStream.VendorVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vendorversion(), output);
  }

  // bool HasVideo = 10;
  if (this->hasvideo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->hasvideo(), output);
  }

  // string VideoCodec = 11;
  if (this->videocodec().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->videocodec().data(), this->videocodec().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Photon.Commands.StartStream.VideoCodec");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->videocodec(), output);
  }

  // uint32 VideoHeight = 12;
  if (this->videoheight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->videoheight(), output);
  }

  // uint32 VideoWidth = 13;
  if (this->videowidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->videowidth(), output);
  }

  // uint32 VideoPayloadType = 14;
  if (this->videopayloadtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->videopayloadtype(), output);
  }

  // uint32 VideoIngestSSRC = 15;
  if (this->videoingestssrc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->videoingestssrc(), output);
  }

  // bool HasAudio = 30;
  if (this->hasaudio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->hasaudio(), output);
  }

  // string AudioCodec = 31;
  if (this->audiocodec().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->audiocodec().data(), this->audiocodec().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Photon.Commands.StartStream.AudioCodec");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->audiocodec(), output);
  }

  // uint32 AudioPayloadType = 32;
  if (this->audiopayloadtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->audiopayloadtype(), output);
  }

  // uint32 AudioIngestSSRC = 33;
  if (this->audioingestssrc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->audioingestssrc(), output);
  }

  // @@protoc_insertion_point(serialize_end:Photon.Commands.StartStream)
}

::google::protobuf::uint8* StartStream::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Photon.Commands.StartStream)
  // string VendorName = 1;
  if (this->vendorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vendorname().data(), this->vendorname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Photon.Commands.StartStream.VendorName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vendorname(), target);
  }

  // string VendorVersion = 2;
  if (this->vendorversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vendorversion().data(), this->vendorversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Photon.Commands.StartStream.VendorVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vendorversion(), target);
  }

  // bool HasVideo = 10;
  if (this->hasvideo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->hasvideo(), target);
  }

  // string VideoCodec = 11;
  if (this->videocodec().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->videocodec().data(), this->videocodec().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Photon.Commands.StartStream.VideoCodec");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->videocodec(), target);
  }

  // uint32 VideoHeight = 12;
  if (this->videoheight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->videoheight(), target);
  }

  // uint32 VideoWidth = 13;
  if (this->videowidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->videowidth(), target);
  }

  // uint32 VideoPayloadType = 14;
  if (this->videopayloadtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->videopayloadtype(), target);
  }

  // uint32 VideoIngestSSRC = 15;
  if (this->videoingestssrc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->videoingestssrc(), target);
  }

  // bool HasAudio = 30;
  if (this->hasaudio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->hasaudio(), target);
  }

  // string AudioCodec = 31;
  if (this->audiocodec().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->audiocodec().data(), this->audiocodec().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Photon.Commands.StartStream.AudioCodec");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->audiocodec(), target);
  }

  // uint32 AudioPayloadType = 32;
  if (this->audiopayloadtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->audiopayloadtype(), target);
  }

  // uint32 AudioIngestSSRC = 33;
  if (this->audioingestssrc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->audioingestssrc(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Photon.Commands.StartStream)
  return target;
}

size_t StartStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Photon.Commands.StartStream)
  size_t total_size = 0;

  // string VendorName = 1;
  if (this->vendorname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vendorname());
  }

  // string VendorVersion = 2;
  if (this->vendorversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vendorversion());
  }

  // string VideoCodec = 11;
  if (this->videocodec().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->videocodec());
  }

  // string AudioCodec = 31;
  if (this->audiocodec().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->audiocodec());
  }

  // uint32 VideoHeight = 12;
  if (this->videoheight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->videoheight());
  }

  // uint32 VideoWidth = 13;
  if (this->videowidth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->videowidth());
  }

  // bool HasVideo = 10;
  if (this->hasvideo() != 0) {
    total_size += 1 + 1;
  }

  // bool HasAudio = 30;
  if (this->hasaudio() != 0) {
    total_size += 2 + 1;
  }

  // uint32 VideoPayloadType = 14;
  if (this->videopayloadtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->videopayloadtype());
  }

  // uint32 VideoIngestSSRC = 15;
  if (this->videoingestssrc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->videoingestssrc());
  }

  // uint32 AudioPayloadType = 32;
  if (this->audiopayloadtype() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->audiopayloadtype());
  }

  // uint32 AudioIngestSSRC = 33;
  if (this->audioingestssrc() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->audioingestssrc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartStream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Photon.Commands.StartStream)
  GOOGLE_DCHECK_NE(&from, this);
  const StartStream* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartStream>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Photon.Commands.StartStream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Photon.Commands.StartStream)
    MergeFrom(*source);
  }
}

void StartStream::MergeFrom(const StartStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Photon.Commands.StartStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.vendorname().size() > 0) {

    vendorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendorname_);
  }
  if (from.vendorversion().size() > 0) {

    vendorversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendorversion_);
  }
  if (from.videocodec().size() > 0) {

    videocodec_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.videocodec_);
  }
  if (from.audiocodec().size() > 0) {

    audiocodec_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audiocodec_);
  }
  if (from.videoheight() != 0) {
    set_videoheight(from.videoheight());
  }
  if (from.videowidth() != 0) {
    set_videowidth(from.videowidth());
  }
  if (from.hasvideo() != 0) {
    set_hasvideo(from.hasvideo());
  }
  if (from.hasaudio() != 0) {
    set_hasaudio(from.hasaudio());
  }
  if (from.videopayloadtype() != 0) {
    set_videopayloadtype(from.videopayloadtype());
  }
  if (from.videoingestssrc() != 0) {
    set_videoingestssrc(from.videoingestssrc());
  }
  if (from.audiopayloadtype() != 0) {
    set_audiopayloadtype(from.audiopayloadtype());
  }
  if (from.audioingestssrc() != 0) {
    set_audioingestssrc(from.audioingestssrc());
  }
}

void StartStream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Photon.Commands.StartStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartStream::CopyFrom(const StartStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Photon.Commands.StartStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartStream::IsInitialized() const {
  return true;
}

void StartStream::Swap(StartStream* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartStream::InternalSwap(StartStream* other) {
  vendorname_.Swap(&other->vendorname_);
  vendorversion_.Swap(&other->vendorversion_);
  videocodec_.Swap(&other->videocodec_);
  audiocodec_.Swap(&other->audiocodec_);
  std::swap(videoheight_, other->videoheight_);
  std::swap(videowidth_, other->videowidth_);
  std::swap(hasvideo_, other->hasvideo_);
  std::swap(hasaudio_, other->hasaudio_);
  std::swap(videopayloadtype_, other->videopayloadtype_);
  std::swap(videoingestssrc_, other->videoingestssrc_);
  std::swap(audiopayloadtype_, other->audiopayloadtype_);
  std::swap(audioingestssrc_, other->audioingestssrc_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartStream::GetMetadata() const {
  protobuf_PhotonCommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhotonCommands_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartStream

// string VendorName = 1;
void StartStream::clear_vendorname() {
  vendorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StartStream::vendorname() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.StartStream.VendorName)
  return vendorname_.GetNoArena();
}
void StartStream::set_vendorname(const ::std::string& value) {
  
  vendorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Photon.Commands.StartStream.VendorName)
}
#if LANG_CXX11
void StartStream::set_vendorname(::std::string&& value) {
  
  vendorname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Photon.Commands.StartStream.VendorName)
}
#endif
void StartStream::set_vendorname(const char* value) {
  
  vendorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Photon.Commands.StartStream.VendorName)
}
void StartStream::set_vendorname(const char* value, size_t size) {
  
  vendorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Photon.Commands.StartStream.VendorName)
}
::std::string* StartStream::mutable_vendorname() {
  
  // @@protoc_insertion_point(field_mutable:Photon.Commands.StartStream.VendorName)
  return vendorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StartStream::release_vendorname() {
  // @@protoc_insertion_point(field_release:Photon.Commands.StartStream.VendorName)
  
  return vendorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartStream::set_allocated_vendorname(::std::string* vendorname) {
  if (vendorname != NULL) {
    
  } else {
    
  }
  vendorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendorname);
  // @@protoc_insertion_point(field_set_allocated:Photon.Commands.StartStream.VendorName)
}

// string VendorVersion = 2;
void StartStream::clear_vendorversion() {
  vendorversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StartStream::vendorversion() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.StartStream.VendorVersion)
  return vendorversion_.GetNoArena();
}
void StartStream::set_vendorversion(const ::std::string& value) {
  
  vendorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Photon.Commands.StartStream.VendorVersion)
}
#if LANG_CXX11
void StartStream::set_vendorversion(::std::string&& value) {
  
  vendorversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Photon.Commands.StartStream.VendorVersion)
}
#endif
void StartStream::set_vendorversion(const char* value) {
  
  vendorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Photon.Commands.StartStream.VendorVersion)
}
void StartStream::set_vendorversion(const char* value, size_t size) {
  
  vendorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Photon.Commands.StartStream.VendorVersion)
}
::std::string* StartStream::mutable_vendorversion() {
  
  // @@protoc_insertion_point(field_mutable:Photon.Commands.StartStream.VendorVersion)
  return vendorversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StartStream::release_vendorversion() {
  // @@protoc_insertion_point(field_release:Photon.Commands.StartStream.VendorVersion)
  
  return vendorversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartStream::set_allocated_vendorversion(::std::string* vendorversion) {
  if (vendorversion != NULL) {
    
  } else {
    
  }
  vendorversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendorversion);
  // @@protoc_insertion_point(field_set_allocated:Photon.Commands.StartStream.VendorVersion)
}

// bool HasVideo = 10;
void StartStream::clear_hasvideo() {
  hasvideo_ = false;
}
bool StartStream::hasvideo() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.StartStream.HasVideo)
  return hasvideo_;
}
void StartStream::set_hasvideo(bool value) {
  
  hasvideo_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.StartStream.HasVideo)
}

// string VideoCodec = 11;
void StartStream::clear_videocodec() {
  videocodec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StartStream::videocodec() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.StartStream.VideoCodec)
  return videocodec_.GetNoArena();
}
void StartStream::set_videocodec(const ::std::string& value) {
  
  videocodec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Photon.Commands.StartStream.VideoCodec)
}
#if LANG_CXX11
void StartStream::set_videocodec(::std::string&& value) {
  
  videocodec_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Photon.Commands.StartStream.VideoCodec)
}
#endif
void StartStream::set_videocodec(const char* value) {
  
  videocodec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Photon.Commands.StartStream.VideoCodec)
}
void StartStream::set_videocodec(const char* value, size_t size) {
  
  videocodec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Photon.Commands.StartStream.VideoCodec)
}
::std::string* StartStream::mutable_videocodec() {
  
  // @@protoc_insertion_point(field_mutable:Photon.Commands.StartStream.VideoCodec)
  return videocodec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StartStream::release_videocodec() {
  // @@protoc_insertion_point(field_release:Photon.Commands.StartStream.VideoCodec)
  
  return videocodec_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartStream::set_allocated_videocodec(::std::string* videocodec) {
  if (videocodec != NULL) {
    
  } else {
    
  }
  videocodec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), videocodec);
  // @@protoc_insertion_point(field_set_allocated:Photon.Commands.StartStream.VideoCodec)
}

// uint32 VideoHeight = 12;
void StartStream::clear_videoheight() {
  videoheight_ = 0u;
}
::google::protobuf::uint32 StartStream::videoheight() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.StartStream.VideoHeight)
  return videoheight_;
}
void StartStream::set_videoheight(::google::protobuf::uint32 value) {
  
  videoheight_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.StartStream.VideoHeight)
}

// uint32 VideoWidth = 13;
void StartStream::clear_videowidth() {
  videowidth_ = 0u;
}
::google::protobuf::uint32 StartStream::videowidth() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.StartStream.VideoWidth)
  return videowidth_;
}
void StartStream::set_videowidth(::google::protobuf::uint32 value) {
  
  videowidth_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.StartStream.VideoWidth)
}

// uint32 VideoPayloadType = 14;
void StartStream::clear_videopayloadtype() {
  videopayloadtype_ = 0u;
}
::google::protobuf::uint32 StartStream::videopayloadtype() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.StartStream.VideoPayloadType)
  return videopayloadtype_;
}
void StartStream::set_videopayloadtype(::google::protobuf::uint32 value) {
  
  videopayloadtype_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.StartStream.VideoPayloadType)
}

// uint32 VideoIngestSSRC = 15;
void StartStream::clear_videoingestssrc() {
  videoingestssrc_ = 0u;
}
::google::protobuf::uint32 StartStream::videoingestssrc() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.StartStream.VideoIngestSSRC)
  return videoingestssrc_;
}
void StartStream::set_videoingestssrc(::google::protobuf::uint32 value) {
  
  videoingestssrc_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.StartStream.VideoIngestSSRC)
}

// bool HasAudio = 30;
void StartStream::clear_hasaudio() {
  hasaudio_ = false;
}
bool StartStream::hasaudio() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.StartStream.HasAudio)
  return hasaudio_;
}
void StartStream::set_hasaudio(bool value) {
  
  hasaudio_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.StartStream.HasAudio)
}

// string AudioCodec = 31;
void StartStream::clear_audiocodec() {
  audiocodec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StartStream::audiocodec() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.StartStream.AudioCodec)
  return audiocodec_.GetNoArena();
}
void StartStream::set_audiocodec(const ::std::string& value) {
  
  audiocodec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Photon.Commands.StartStream.AudioCodec)
}
#if LANG_CXX11
void StartStream::set_audiocodec(::std::string&& value) {
  
  audiocodec_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Photon.Commands.StartStream.AudioCodec)
}
#endif
void StartStream::set_audiocodec(const char* value) {
  
  audiocodec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Photon.Commands.StartStream.AudioCodec)
}
void StartStream::set_audiocodec(const char* value, size_t size) {
  
  audiocodec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Photon.Commands.StartStream.AudioCodec)
}
::std::string* StartStream::mutable_audiocodec() {
  
  // @@protoc_insertion_point(field_mutable:Photon.Commands.StartStream.AudioCodec)
  return audiocodec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StartStream::release_audiocodec() {
  // @@protoc_insertion_point(field_release:Photon.Commands.StartStream.AudioCodec)
  
  return audiocodec_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartStream::set_allocated_audiocodec(::std::string* audiocodec) {
  if (audiocodec != NULL) {
    
  } else {
    
  }
  audiocodec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audiocodec);
  // @@protoc_insertion_point(field_set_allocated:Photon.Commands.StartStream.AudioCodec)
}

// uint32 AudioPayloadType = 32;
void StartStream::clear_audiopayloadtype() {
  audiopayloadtype_ = 0u;
}
::google::protobuf::uint32 StartStream::audiopayloadtype() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.StartStream.AudioPayloadType)
  return audiopayloadtype_;
}
void StartStream::set_audiopayloadtype(::google::protobuf::uint32 value) {
  
  audiopayloadtype_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.StartStream.AudioPayloadType)
}

// uint32 AudioIngestSSRC = 33;
void StartStream::clear_audioingestssrc() {
  audioingestssrc_ = 0u;
}
::google::protobuf::uint32 StartStream::audioingestssrc() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.StartStream.AudioIngestSSRC)
  return audioingestssrc_;
}
void StartStream::set_audioingestssrc(::google::protobuf::uint32 value) {
  
  audioingestssrc_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.StartStream.AudioIngestSSRC)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamStart_Response::kIngestPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamStart_Response::StreamStart_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhotonCommands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Photon.Commands.StreamStart_Response)
}
StreamStart_Response::StreamStart_Response(const StreamStart_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ingestport_ = from.ingestport_;
  // @@protoc_insertion_point(copy_constructor:Photon.Commands.StreamStart_Response)
}

void StreamStart_Response::SharedCtor() {
  ingestport_ = 0u;
  _cached_size_ = 0;
}

StreamStart_Response::~StreamStart_Response() {
  // @@protoc_insertion_point(destructor:Photon.Commands.StreamStart_Response)
  SharedDtor();
}

void StreamStart_Response::SharedDtor() {
}

void StreamStart_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamStart_Response::descriptor() {
  protobuf_PhotonCommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhotonCommands_2eproto::file_level_metadata[6].descriptor;
}

const StreamStart_Response& StreamStart_Response::default_instance() {
  protobuf_PhotonCommands_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamStart_Response* StreamStart_Response::New(::google::protobuf::Arena* arena) const {
  StreamStart_Response* n = new StreamStart_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamStart_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Photon.Commands.StreamStart_Response)
  ingestport_ = 0u;
}

bool StreamStart_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Photon.Commands.StreamStart_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 IngestPort = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ingestport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Photon.Commands.StreamStart_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Photon.Commands.StreamStart_Response)
  return false;
#undef DO_
}

void StreamStart_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Photon.Commands.StreamStart_Response)
  // uint32 IngestPort = 1;
  if (this->ingestport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ingestport(), output);
  }

  // @@protoc_insertion_point(serialize_end:Photon.Commands.StreamStart_Response)
}

::google::protobuf::uint8* StreamStart_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Photon.Commands.StreamStart_Response)
  // uint32 IngestPort = 1;
  if (this->ingestport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ingestport(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Photon.Commands.StreamStart_Response)
  return target;
}

size_t StreamStart_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Photon.Commands.StreamStart_Response)
  size_t total_size = 0;

  // uint32 IngestPort = 1;
  if (this->ingestport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ingestport());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamStart_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Photon.Commands.StreamStart_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamStart_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamStart_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Photon.Commands.StreamStart_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Photon.Commands.StreamStart_Response)
    MergeFrom(*source);
  }
}

void StreamStart_Response::MergeFrom(const StreamStart_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Photon.Commands.StreamStart_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.ingestport() != 0) {
    set_ingestport(from.ingestport());
  }
}

void StreamStart_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Photon.Commands.StreamStart_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamStart_Response::CopyFrom(const StreamStart_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Photon.Commands.StreamStart_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamStart_Response::IsInitialized() const {
  return true;
}

void StreamStart_Response::Swap(StreamStart_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamStart_Response::InternalSwap(StreamStart_Response* other) {
  std::swap(ingestport_, other->ingestport_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamStart_Response::GetMetadata() const {
  protobuf_PhotonCommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhotonCommands_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamStart_Response

// uint32 IngestPort = 1;
void StreamStart_Response::clear_ingestport() {
  ingestport_ = 0u;
}
::google::protobuf::uint32 StreamStart_Response::ingestport() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.StreamStart_Response.IngestPort)
  return ingestport_;
}
void StreamStart_Response::set_ingestport(::google::protobuf::uint32 value) {
  
  ingestport_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.StreamStart_Response.IngestPort)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Heartbeat::Heartbeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhotonCommands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Photon.Commands.Heartbeat)
}
Heartbeat::Heartbeat(const Heartbeat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Photon.Commands.Heartbeat)
}

void Heartbeat::SharedCtor() {
  _cached_size_ = 0;
}

Heartbeat::~Heartbeat() {
  // @@protoc_insertion_point(destructor:Photon.Commands.Heartbeat)
  SharedDtor();
}

void Heartbeat::SharedDtor() {
}

void Heartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Heartbeat::descriptor() {
  protobuf_PhotonCommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhotonCommands_2eproto::file_level_metadata[7].descriptor;
}

const Heartbeat& Heartbeat::default_instance() {
  protobuf_PhotonCommands_2eproto::InitDefaults();
  return *internal_default_instance();
}

Heartbeat* Heartbeat::New(::google::protobuf::Arena* arena) const {
  Heartbeat* n = new Heartbeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:Photon.Commands.Heartbeat)
}

bool Heartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Photon.Commands.Heartbeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:Photon.Commands.Heartbeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Photon.Commands.Heartbeat)
  return false;
#undef DO_
}

void Heartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Photon.Commands.Heartbeat)
  // @@protoc_insertion_point(serialize_end:Photon.Commands.Heartbeat)
}

::google::protobuf::uint8* Heartbeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Photon.Commands.Heartbeat)
  // @@protoc_insertion_point(serialize_to_array_end:Photon.Commands.Heartbeat)
  return target;
}

size_t Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Photon.Commands.Heartbeat)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Heartbeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Photon.Commands.Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  const Heartbeat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Heartbeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Photon.Commands.Heartbeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Photon.Commands.Heartbeat)
    MergeFrom(*source);
  }
}

void Heartbeat::MergeFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Photon.Commands.Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void Heartbeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Photon.Commands.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Photon.Commands.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartbeat::IsInitialized() const {
  return true;
}

void Heartbeat::Swap(Heartbeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Heartbeat::InternalSwap(Heartbeat* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Heartbeat::GetMetadata() const {
  protobuf_PhotonCommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhotonCommands_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Heartbeat

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Heartbeat_Response::Heartbeat_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhotonCommands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Photon.Commands.Heartbeat_Response)
}
Heartbeat_Response::Heartbeat_Response(const Heartbeat_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Photon.Commands.Heartbeat_Response)
}

void Heartbeat_Response::SharedCtor() {
  _cached_size_ = 0;
}

Heartbeat_Response::~Heartbeat_Response() {
  // @@protoc_insertion_point(destructor:Photon.Commands.Heartbeat_Response)
  SharedDtor();
}

void Heartbeat_Response::SharedDtor() {
}

void Heartbeat_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Heartbeat_Response::descriptor() {
  protobuf_PhotonCommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhotonCommands_2eproto::file_level_metadata[8].descriptor;
}

const Heartbeat_Response& Heartbeat_Response::default_instance() {
  protobuf_PhotonCommands_2eproto::InitDefaults();
  return *internal_default_instance();
}

Heartbeat_Response* Heartbeat_Response::New(::google::protobuf::Arena* arena) const {
  Heartbeat_Response* n = new Heartbeat_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Heartbeat_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Photon.Commands.Heartbeat_Response)
}

bool Heartbeat_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Photon.Commands.Heartbeat_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:Photon.Commands.Heartbeat_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Photon.Commands.Heartbeat_Response)
  return false;
#undef DO_
}

void Heartbeat_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Photon.Commands.Heartbeat_Response)
  // @@protoc_insertion_point(serialize_end:Photon.Commands.Heartbeat_Response)
}

::google::protobuf::uint8* Heartbeat_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Photon.Commands.Heartbeat_Response)
  // @@protoc_insertion_point(serialize_to_array_end:Photon.Commands.Heartbeat_Response)
  return target;
}

size_t Heartbeat_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Photon.Commands.Heartbeat_Response)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Heartbeat_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Photon.Commands.Heartbeat_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Heartbeat_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Heartbeat_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Photon.Commands.Heartbeat_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Photon.Commands.Heartbeat_Response)
    MergeFrom(*source);
  }
}

void Heartbeat_Response::MergeFrom(const Heartbeat_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Photon.Commands.Heartbeat_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void Heartbeat_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Photon.Commands.Heartbeat_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heartbeat_Response::CopyFrom(const Heartbeat_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Photon.Commands.Heartbeat_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartbeat_Response::IsInitialized() const {
  return true;
}

void Heartbeat_Response::Swap(Heartbeat_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Heartbeat_Response::InternalSwap(Heartbeat_Response* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Heartbeat_Response::GetMetadata() const {
  protobuf_PhotonCommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhotonCommands_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Heartbeat_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Disconnect::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Disconnect::Disconnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhotonCommands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Photon.Commands.Disconnect)
}
Disconnect::Disconnect(const Disconnect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:Photon.Commands.Disconnect)
}

void Disconnect::SharedCtor() {
  reason_ = 0;
  _cached_size_ = 0;
}

Disconnect::~Disconnect() {
  // @@protoc_insertion_point(destructor:Photon.Commands.Disconnect)
  SharedDtor();
}

void Disconnect::SharedDtor() {
}

void Disconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Disconnect::descriptor() {
  protobuf_PhotonCommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhotonCommands_2eproto::file_level_metadata[9].descriptor;
}

const Disconnect& Disconnect::default_instance() {
  protobuf_PhotonCommands_2eproto::InitDefaults();
  return *internal_default_instance();
}

Disconnect* Disconnect::New(::google::protobuf::Arena* arena) const {
  Disconnect* n = new Disconnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Disconnect::Clear() {
// @@protoc_insertion_point(message_clear_start:Photon.Commands.Disconnect)
  reason_ = 0;
}

bool Disconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Photon.Commands.Disconnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Photon.Commands.DisconnectReasons Reason = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::Photon::Commands::DisconnectReasons >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Photon.Commands.Disconnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Photon.Commands.Disconnect)
  return false;
#undef DO_
}

void Disconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Photon.Commands.Disconnect)
  // .Photon.Commands.DisconnectReasons Reason = 1;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reason(), output);
  }

  // @@protoc_insertion_point(serialize_end:Photon.Commands.Disconnect)
}

::google::protobuf::uint8* Disconnect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Photon.Commands.Disconnect)
  // .Photon.Commands.DisconnectReasons Reason = 1;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reason(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Photon.Commands.Disconnect)
  return target;
}

size_t Disconnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Photon.Commands.Disconnect)
  size_t total_size = 0;

  // .Photon.Commands.DisconnectReasons Reason = 1;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Disconnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Photon.Commands.Disconnect)
  GOOGLE_DCHECK_NE(&from, this);
  const Disconnect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Disconnect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Photon.Commands.Disconnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Photon.Commands.Disconnect)
    MergeFrom(*source);
  }
}

void Disconnect::MergeFrom(const Disconnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Photon.Commands.Disconnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
}

void Disconnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Photon.Commands.Disconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Disconnect::CopyFrom(const Disconnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Photon.Commands.Disconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Disconnect::IsInitialized() const {
  return true;
}

void Disconnect::Swap(Disconnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Disconnect::InternalSwap(Disconnect* other) {
  std::swap(reason_, other->reason_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Disconnect::GetMetadata() const {
  protobuf_PhotonCommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhotonCommands_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Disconnect

// .Photon.Commands.DisconnectReasons Reason = 1;
void Disconnect::clear_reason() {
  reason_ = 0;
}
::Photon::Commands::DisconnectReasons Disconnect::reason() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.Disconnect.Reason)
  return static_cast< ::Photon::Commands::DisconnectReasons >(reason_);
}
void Disconnect::set_reason(::Photon::Commands::DisconnectReasons value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.Disconnect.Reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Commands
}  // namespace Photon

// @@protoc_insertion_point(global_scope)
