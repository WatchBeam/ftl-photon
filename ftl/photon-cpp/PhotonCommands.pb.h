// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PhotonCommands.proto

#ifndef PROTOBUF_PhotonCommands_2eproto__INCLUDED
#define PROTOBUF_PhotonCommands_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
namespace Photon {
namespace Commands {
class Authenticate;
class AuthenticateDefaultTypeInternal;
extern AuthenticateDefaultTypeInternal _Authenticate_default_instance_;
class Authenticate_Response;
class Authenticate_ResponseDefaultTypeInternal;
extern Authenticate_ResponseDefaultTypeInternal _Authenticate_Response_default_instance_;
class Connect;
class ConnectDefaultTypeInternal;
extern ConnectDefaultTypeInternal _Connect_default_instance_;
class Connect_Response;
class Connect_ResponseDefaultTypeInternal;
extern Connect_ResponseDefaultTypeInternal _Connect_Response_default_instance_;
class Disconnect;
class DisconnectDefaultTypeInternal;
extern DisconnectDefaultTypeInternal _Disconnect_default_instance_;
class Heartbeat;
class HeartbeatDefaultTypeInternal;
extern HeartbeatDefaultTypeInternal _Heartbeat_default_instance_;
class Heartbeat_Response;
class Heartbeat_ResponseDefaultTypeInternal;
extern Heartbeat_ResponseDefaultTypeInternal _Heartbeat_Response_default_instance_;
class PhotonWrapper;
class PhotonWrapperDefaultTypeInternal;
extern PhotonWrapperDefaultTypeInternal _PhotonWrapper_default_instance_;
class StartStream;
class StartStreamDefaultTypeInternal;
extern StartStreamDefaultTypeInternal _StartStream_default_instance_;
class StreamStart_Response;
class StreamStart_ResponseDefaultTypeInternal;
extern StreamStart_ResponseDefaultTypeInternal _StreamStart_Response_default_instance_;
}  // namespace Commands
}  // namespace Photon
namespace google {
namespace protobuf {
class Any;
class AnyDefaultTypeInternal;
extern AnyDefaultTypeInternal _Any_default_instance_;
}  // namespace protobuf
}  // namespace google

namespace Photon {
namespace Commands {

namespace protobuf_PhotonCommands_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_PhotonCommands_2eproto

enum ProtocolVersion {
  NONE = 0,
  V1 = 1,
  ProtocolVersion_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ProtocolVersion_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ProtocolVersion_IsValid(int value);
const ProtocolVersion ProtocolVersion_MIN = NONE;
const ProtocolVersion ProtocolVersion_MAX = V1;
const int ProtocolVersion_ARRAYSIZE = ProtocolVersion_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProtocolVersion_descriptor();
inline const ::std::string& ProtocolVersion_Name(ProtocolVersion value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProtocolVersion_descriptor(), value);
}
inline bool ProtocolVersion_Parse(
    const ::std::string& name, ProtocolVersion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtocolVersion>(
    ProtocolVersion_descriptor(), name, value);
}
enum StatusCodes {
  UNKNOWN = 0,
  OK = 200,
  PING = 201,
  BAD_REQUEST = 400,
  UNAUTHORIZED = 401,
  OLD_VERSION = 402,
  NO_RESPONSE = 403,
  INVALID_STREAM_KEY = 406,
  CHANNEL_IN_USE = 407,
  REGION_UNSUPPORTED = 408,
  NO_MEDIA_TIMEOUT = 409,
  INTERNAL_SERVER_ERROR = 500,
  INTERNAL_COMMAND_ERROR = 501,
  INTERNAL_LOCAL_ERROR = 502,
  StatusCodes_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StatusCodes_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StatusCodes_IsValid(int value);
const StatusCodes StatusCodes_MIN = UNKNOWN;
const StatusCodes StatusCodes_MAX = INTERNAL_LOCAL_ERROR;
const int StatusCodes_ARRAYSIZE = StatusCodes_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusCodes_descriptor();
inline const ::std::string& StatusCodes_Name(StatusCodes value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusCodes_descriptor(), value);
}
inline bool StatusCodes_Parse(
    const ::std::string& name, StatusCodes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusCodes>(
    StatusCodes_descriptor(), name, value);
}
enum DisconnectReasons {
  DISCONNECT_UNKNOWN = 0,
  CLIENT_CLEAN = 200,
  INGEST_CLEAN = 201,
  CLIENT_ERROR_UNKNOWN = 300,
  CLIENT_ERROR_TIMEOUT = 301,
  CLIENT_ERROR_BAD_RESPONSE = 302,
  INGEST_ERROR_UNKNOWN = 400,
  INGEST_ERROR_TIMEOUT = 401,
  DisconnectReasons_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DisconnectReasons_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DisconnectReasons_IsValid(int value);
const DisconnectReasons DisconnectReasons_MIN = DISCONNECT_UNKNOWN;
const DisconnectReasons DisconnectReasons_MAX = INGEST_ERROR_TIMEOUT;
const int DisconnectReasons_ARRAYSIZE = DisconnectReasons_MAX + 1;

const ::google::protobuf::EnumDescriptor* DisconnectReasons_descriptor();
inline const ::std::string& DisconnectReasons_Name(DisconnectReasons value) {
  return ::google::protobuf::internal::NameOfEnum(
    DisconnectReasons_descriptor(), value);
}
inline bool DisconnectReasons_Parse(
    const ::std::string& name, DisconnectReasons* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DisconnectReasons>(
    DisconnectReasons_descriptor(), name, value);
}
// ===================================================================

class PhotonWrapper : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Photon.Commands.PhotonWrapper) */ {
 public:
  PhotonWrapper();
  virtual ~PhotonWrapper();

  PhotonWrapper(const PhotonWrapper& from);

  inline PhotonWrapper& operator=(const PhotonWrapper& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PhotonWrapper& default_instance();

  static inline const PhotonWrapper* internal_default_instance() {
    return reinterpret_cast<const PhotonWrapper*>(
               &_PhotonWrapper_default_instance_);
  }

  void Swap(PhotonWrapper* other);

  // implements Message ----------------------------------------------

  inline PhotonWrapper* New() const PROTOBUF_FINAL { return New(NULL); }

  PhotonWrapper* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PhotonWrapper& from);
  void MergeFrom(const PhotonWrapper& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PhotonWrapper* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Any Command = 15;
  bool has_command() const;
  void clear_command();
  static const int kCommandFieldNumber = 15;
  const ::google::protobuf::Any& command() const;
  ::google::protobuf::Any* mutable_command();
  ::google::protobuf::Any* release_command();
  void set_allocated_command(::google::protobuf::Any* command);

  // .Photon.Commands.StatusCodes StatusCode = 1;
  void clear_statuscode();
  static const int kStatusCodeFieldNumber = 1;
  ::Photon::Commands::StatusCodes statuscode() const;
  void set_statuscode(::Photon::Commands::StatusCodes value);

  // @@protoc_insertion_point(class_scope:Photon.Commands.PhotonWrapper)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Any* command_;
  int statuscode_;
  mutable int _cached_size_;
  friend struct  protobuf_PhotonCommands_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Connect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Photon.Commands.Connect) */ {
 public:
  Connect();
  virtual ~Connect();

  Connect(const Connect& from);

  inline Connect& operator=(const Connect& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Connect& default_instance();

  static inline const Connect* internal_default_instance() {
    return reinterpret_cast<const Connect*>(
               &_Connect_default_instance_);
  }

  void Swap(Connect* other);

  // implements Message ----------------------------------------------

  inline Connect* New() const PROTOBUF_FINAL { return New(NULL); }

  Connect* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Connect& from);
  void MergeFrom(const Connect& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Connect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Photon.Commands.ProtocolVersion ClientProtocolVersion = 1;
  void clear_clientprotocolversion();
  static const int kClientProtocolVersionFieldNumber = 1;
  ::Photon::Commands::ProtocolVersion clientprotocolversion() const;
  void set_clientprotocolversion(::Photon::Commands::ProtocolVersion value);

  // @@protoc_insertion_point(class_scope:Photon.Commands.Connect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int clientprotocolversion_;
  mutable int _cached_size_;
  friend struct  protobuf_PhotonCommands_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Connect_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Photon.Commands.Connect_Response) */ {
 public:
  Connect_Response();
  virtual ~Connect_Response();

  Connect_Response(const Connect_Response& from);

  inline Connect_Response& operator=(const Connect_Response& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Connect_Response& default_instance();

  static inline const Connect_Response* internal_default_instance() {
    return reinterpret_cast<const Connect_Response*>(
               &_Connect_Response_default_instance_);
  }

  void Swap(Connect_Response* other);

  // implements Message ----------------------------------------------

  inline Connect_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  Connect_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Connect_Response& from);
  void MergeFrom(const Connect_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Connect_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string HmacKey = 3;
  void clear_hmackey();
  static const int kHmacKeyFieldNumber = 3;
  const ::std::string& hmackey() const;
  void set_hmackey(const ::std::string& value);
  #if LANG_CXX11
  void set_hmackey(::std::string&& value);
  #endif
  void set_hmackey(const char* value);
  void set_hmackey(const char* value, size_t size);
  ::std::string* mutable_hmackey();
  ::std::string* release_hmackey();
  void set_allocated_hmackey(::std::string* hmackey);

  // uint64 SessionId = 2;
  void clear_sessionid();
  static const int kSessionIdFieldNumber = 2;
  ::google::protobuf::uint64 sessionid() const;
  void set_sessionid(::google::protobuf::uint64 value);

  // .Photon.Commands.ProtocolVersion ServerProtocolVersion = 1;
  void clear_serverprotocolversion();
  static const int kServerProtocolVersionFieldNumber = 1;
  ::Photon::Commands::ProtocolVersion serverprotocolversion() const;
  void set_serverprotocolversion(::Photon::Commands::ProtocolVersion value);

  // @@protoc_insertion_point(class_scope:Photon.Commands.Connect_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hmackey_;
  ::google::protobuf::uint64 sessionid_;
  int serverprotocolversion_;
  mutable int _cached_size_;
  friend struct  protobuf_PhotonCommands_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Authenticate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Photon.Commands.Authenticate) */ {
 public:
  Authenticate();
  virtual ~Authenticate();

  Authenticate(const Authenticate& from);

  inline Authenticate& operator=(const Authenticate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Authenticate& default_instance();

  static inline const Authenticate* internal_default_instance() {
    return reinterpret_cast<const Authenticate*>(
               &_Authenticate_default_instance_);
  }

  void Swap(Authenticate* other);

  // implements Message ----------------------------------------------

  inline Authenticate* New() const PROTOBUF_FINAL { return New(NULL); }

  Authenticate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Authenticate& from);
  void MergeFrom(const Authenticate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Authenticate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string AuthKey = 2;
  void clear_authkey();
  static const int kAuthKeyFieldNumber = 2;
  const ::std::string& authkey() const;
  void set_authkey(const ::std::string& value);
  #if LANG_CXX11
  void set_authkey(::std::string&& value);
  #endif
  void set_authkey(const char* value);
  void set_authkey(const char* value, size_t size);
  ::std::string* mutable_authkey();
  ::std::string* release_authkey();
  void set_allocated_authkey(::std::string* authkey);

  // uint32 ChannelId = 1;
  void clear_channelid();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::uint32 channelid() const;
  void set_channelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Photon.Commands.Authenticate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr authkey_;
  ::google::protobuf::uint32 channelid_;
  mutable int _cached_size_;
  friend struct  protobuf_PhotonCommands_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Authenticate_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Photon.Commands.Authenticate_Response) */ {
 public:
  Authenticate_Response();
  virtual ~Authenticate_Response();

  Authenticate_Response(const Authenticate_Response& from);

  inline Authenticate_Response& operator=(const Authenticate_Response& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Authenticate_Response& default_instance();

  static inline const Authenticate_Response* internal_default_instance() {
    return reinterpret_cast<const Authenticate_Response*>(
               &_Authenticate_Response_default_instance_);
  }

  void Swap(Authenticate_Response* other);

  // implements Message ----------------------------------------------

  inline Authenticate_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  Authenticate_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Authenticate_Response& from);
  void MergeFrom(const Authenticate_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Authenticate_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Photon.Commands.Authenticate_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct  protobuf_PhotonCommands_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StartStream : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Photon.Commands.StartStream) */ {
 public:
  StartStream();
  virtual ~StartStream();

  StartStream(const StartStream& from);

  inline StartStream& operator=(const StartStream& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartStream& default_instance();

  static inline const StartStream* internal_default_instance() {
    return reinterpret_cast<const StartStream*>(
               &_StartStream_default_instance_);
  }

  void Swap(StartStream* other);

  // implements Message ----------------------------------------------

  inline StartStream* New() const PROTOBUF_FINAL { return New(NULL); }

  StartStream* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StartStream& from);
  void MergeFrom(const StartStream& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StartStream* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string VendorName = 1;
  void clear_vendorname();
  static const int kVendorNameFieldNumber = 1;
  const ::std::string& vendorname() const;
  void set_vendorname(const ::std::string& value);
  #if LANG_CXX11
  void set_vendorname(::std::string&& value);
  #endif
  void set_vendorname(const char* value);
  void set_vendorname(const char* value, size_t size);
  ::std::string* mutable_vendorname();
  ::std::string* release_vendorname();
  void set_allocated_vendorname(::std::string* vendorname);

  // string VendorVersion = 2;
  void clear_vendorversion();
  static const int kVendorVersionFieldNumber = 2;
  const ::std::string& vendorversion() const;
  void set_vendorversion(const ::std::string& value);
  #if LANG_CXX11
  void set_vendorversion(::std::string&& value);
  #endif
  void set_vendorversion(const char* value);
  void set_vendorversion(const char* value, size_t size);
  ::std::string* mutable_vendorversion();
  ::std::string* release_vendorversion();
  void set_allocated_vendorversion(::std::string* vendorversion);

  // string VideoCodec = 11;
  void clear_videocodec();
  static const int kVideoCodecFieldNumber = 11;
  const ::std::string& videocodec() const;
  void set_videocodec(const ::std::string& value);
  #if LANG_CXX11
  void set_videocodec(::std::string&& value);
  #endif
  void set_videocodec(const char* value);
  void set_videocodec(const char* value, size_t size);
  ::std::string* mutable_videocodec();
  ::std::string* release_videocodec();
  void set_allocated_videocodec(::std::string* videocodec);

  // string AudioCodec = 31;
  void clear_audiocodec();
  static const int kAudioCodecFieldNumber = 31;
  const ::std::string& audiocodec() const;
  void set_audiocodec(const ::std::string& value);
  #if LANG_CXX11
  void set_audiocodec(::std::string&& value);
  #endif
  void set_audiocodec(const char* value);
  void set_audiocodec(const char* value, size_t size);
  ::std::string* mutable_audiocodec();
  ::std::string* release_audiocodec();
  void set_allocated_audiocodec(::std::string* audiocodec);

  // uint32 VideoHeight = 12;
  void clear_videoheight();
  static const int kVideoHeightFieldNumber = 12;
  ::google::protobuf::uint32 videoheight() const;
  void set_videoheight(::google::protobuf::uint32 value);

  // uint32 VideoWidth = 13;
  void clear_videowidth();
  static const int kVideoWidthFieldNumber = 13;
  ::google::protobuf::uint32 videowidth() const;
  void set_videowidth(::google::protobuf::uint32 value);

  // bool HasVideo = 10;
  void clear_hasvideo();
  static const int kHasVideoFieldNumber = 10;
  bool hasvideo() const;
  void set_hasvideo(bool value);

  // bool HasAudio = 30;
  void clear_hasaudio();
  static const int kHasAudioFieldNumber = 30;
  bool hasaudio() const;
  void set_hasaudio(bool value);

  // uint32 VideoPayloadType = 14;
  void clear_videopayloadtype();
  static const int kVideoPayloadTypeFieldNumber = 14;
  ::google::protobuf::uint32 videopayloadtype() const;
  void set_videopayloadtype(::google::protobuf::uint32 value);

  // uint32 VideoIngestSSRC = 15;
  void clear_videoingestssrc();
  static const int kVideoIngestSSRCFieldNumber = 15;
  ::google::protobuf::uint32 videoingestssrc() const;
  void set_videoingestssrc(::google::protobuf::uint32 value);

  // uint32 AudioPayloadType = 32;
  void clear_audiopayloadtype();
  static const int kAudioPayloadTypeFieldNumber = 32;
  ::google::protobuf::uint32 audiopayloadtype() const;
  void set_audiopayloadtype(::google::protobuf::uint32 value);

  // uint32 AudioIngestSSRC = 33;
  void clear_audioingestssrc();
  static const int kAudioIngestSSRCFieldNumber = 33;
  ::google::protobuf::uint32 audioingestssrc() const;
  void set_audioingestssrc(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Photon.Commands.StartStream)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vendorname_;
  ::google::protobuf::internal::ArenaStringPtr vendorversion_;
  ::google::protobuf::internal::ArenaStringPtr videocodec_;
  ::google::protobuf::internal::ArenaStringPtr audiocodec_;
  ::google::protobuf::uint32 videoheight_;
  ::google::protobuf::uint32 videowidth_;
  bool hasvideo_;
  bool hasaudio_;
  ::google::protobuf::uint32 videopayloadtype_;
  ::google::protobuf::uint32 videoingestssrc_;
  ::google::protobuf::uint32 audiopayloadtype_;
  ::google::protobuf::uint32 audioingestssrc_;
  mutable int _cached_size_;
  friend struct  protobuf_PhotonCommands_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StreamStart_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Photon.Commands.StreamStart_Response) */ {
 public:
  StreamStart_Response();
  virtual ~StreamStart_Response();

  StreamStart_Response(const StreamStart_Response& from);

  inline StreamStart_Response& operator=(const StreamStart_Response& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamStart_Response& default_instance();

  static inline const StreamStart_Response* internal_default_instance() {
    return reinterpret_cast<const StreamStart_Response*>(
               &_StreamStart_Response_default_instance_);
  }

  void Swap(StreamStart_Response* other);

  // implements Message ----------------------------------------------

  inline StreamStart_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  StreamStart_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StreamStart_Response& from);
  void MergeFrom(const StreamStart_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StreamStart_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 IngestPort = 1;
  void clear_ingestport();
  static const int kIngestPortFieldNumber = 1;
  ::google::protobuf::uint32 ingestport() const;
  void set_ingestport(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Photon.Commands.StreamStart_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 ingestport_;
  mutable int _cached_size_;
  friend struct  protobuf_PhotonCommands_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Heartbeat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Photon.Commands.Heartbeat) */ {
 public:
  Heartbeat();
  virtual ~Heartbeat();

  Heartbeat(const Heartbeat& from);

  inline Heartbeat& operator=(const Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Heartbeat& default_instance();

  static inline const Heartbeat* internal_default_instance() {
    return reinterpret_cast<const Heartbeat*>(
               &_Heartbeat_default_instance_);
  }

  void Swap(Heartbeat* other);

  // implements Message ----------------------------------------------

  inline Heartbeat* New() const PROTOBUF_FINAL { return New(NULL); }

  Heartbeat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Heartbeat& from);
  void MergeFrom(const Heartbeat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Heartbeat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Photon.Commands.Heartbeat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct  protobuf_PhotonCommands_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Heartbeat_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Photon.Commands.Heartbeat_Response) */ {
 public:
  Heartbeat_Response();
  virtual ~Heartbeat_Response();

  Heartbeat_Response(const Heartbeat_Response& from);

  inline Heartbeat_Response& operator=(const Heartbeat_Response& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Heartbeat_Response& default_instance();

  static inline const Heartbeat_Response* internal_default_instance() {
    return reinterpret_cast<const Heartbeat_Response*>(
               &_Heartbeat_Response_default_instance_);
  }

  void Swap(Heartbeat_Response* other);

  // implements Message ----------------------------------------------

  inline Heartbeat_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  Heartbeat_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Heartbeat_Response& from);
  void MergeFrom(const Heartbeat_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Heartbeat_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Photon.Commands.Heartbeat_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct  protobuf_PhotonCommands_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Disconnect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Photon.Commands.Disconnect) */ {
 public:
  Disconnect();
  virtual ~Disconnect();

  Disconnect(const Disconnect& from);

  inline Disconnect& operator=(const Disconnect& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Disconnect& default_instance();

  static inline const Disconnect* internal_default_instance() {
    return reinterpret_cast<const Disconnect*>(
               &_Disconnect_default_instance_);
  }

  void Swap(Disconnect* other);

  // implements Message ----------------------------------------------

  inline Disconnect* New() const PROTOBUF_FINAL { return New(NULL); }

  Disconnect* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Disconnect& from);
  void MergeFrom(const Disconnect& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Disconnect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Photon.Commands.DisconnectReasons Reason = 1;
  void clear_reason();
  static const int kReasonFieldNumber = 1;
  ::Photon::Commands::DisconnectReasons reason() const;
  void set_reason(::Photon::Commands::DisconnectReasons value);

  // @@protoc_insertion_point(class_scope:Photon.Commands.Disconnect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int reason_;
  mutable int _cached_size_;
  friend struct  protobuf_PhotonCommands_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PhotonWrapper

// .Photon.Commands.StatusCodes StatusCode = 1;
inline void PhotonWrapper::clear_statuscode() {
  statuscode_ = 0;
}
inline ::Photon::Commands::StatusCodes PhotonWrapper::statuscode() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.PhotonWrapper.StatusCode)
  return static_cast< ::Photon::Commands::StatusCodes >(statuscode_);
}
inline void PhotonWrapper::set_statuscode(::Photon::Commands::StatusCodes value) {
  
  statuscode_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.PhotonWrapper.StatusCode)
}

// .google.protobuf.Any Command = 15;
inline bool PhotonWrapper::has_command() const {
  return this != internal_default_instance() && command_ != NULL;
}
inline void PhotonWrapper::clear_command() {
  if (GetArenaNoVirtual() == NULL && command_ != NULL) delete command_;
  command_ = NULL;
}
inline const ::google::protobuf::Any& PhotonWrapper::command() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.PhotonWrapper.Command)
  return command_ != NULL ? *command_
                         : *::google::protobuf::Any::internal_default_instance();
}
inline ::google::protobuf::Any* PhotonWrapper::mutable_command() {
  
  if (command_ == NULL) {
    command_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:Photon.Commands.PhotonWrapper.Command)
  return command_;
}
inline ::google::protobuf::Any* PhotonWrapper::release_command() {
  // @@protoc_insertion_point(field_release:Photon.Commands.PhotonWrapper.Command)
  
  ::google::protobuf::Any* temp = command_;
  command_ = NULL;
  return temp;
}
inline void PhotonWrapper::set_allocated_command(::google::protobuf::Any* command) {
  delete command_;
  command_ = command;
  if (command) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Photon.Commands.PhotonWrapper.Command)
}

// -------------------------------------------------------------------

// Connect

// .Photon.Commands.ProtocolVersion ClientProtocolVersion = 1;
inline void Connect::clear_clientprotocolversion() {
  clientprotocolversion_ = 0;
}
inline ::Photon::Commands::ProtocolVersion Connect::clientprotocolversion() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.Connect.ClientProtocolVersion)
  return static_cast< ::Photon::Commands::ProtocolVersion >(clientprotocolversion_);
}
inline void Connect::set_clientprotocolversion(::Photon::Commands::ProtocolVersion value) {
  
  clientprotocolversion_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.Connect.ClientProtocolVersion)
}

// -------------------------------------------------------------------

// Connect_Response

// .Photon.Commands.ProtocolVersion ServerProtocolVersion = 1;
inline void Connect_Response::clear_serverprotocolversion() {
  serverprotocolversion_ = 0;
}
inline ::Photon::Commands::ProtocolVersion Connect_Response::serverprotocolversion() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.Connect_Response.ServerProtocolVersion)
  return static_cast< ::Photon::Commands::ProtocolVersion >(serverprotocolversion_);
}
inline void Connect_Response::set_serverprotocolversion(::Photon::Commands::ProtocolVersion value) {
  
  serverprotocolversion_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.Connect_Response.ServerProtocolVersion)
}

// uint64 SessionId = 2;
inline void Connect_Response::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Connect_Response::sessionid() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.Connect_Response.SessionId)
  return sessionid_;
}
inline void Connect_Response::set_sessionid(::google::protobuf::uint64 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.Connect_Response.SessionId)
}

// string HmacKey = 3;
inline void Connect_Response::clear_hmackey() {
  hmackey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Connect_Response::hmackey() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.Connect_Response.HmacKey)
  return hmackey_.GetNoArena();
}
inline void Connect_Response::set_hmackey(const ::std::string& value) {
  
  hmackey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Photon.Commands.Connect_Response.HmacKey)
}
#if LANG_CXX11
inline void Connect_Response::set_hmackey(::std::string&& value) {
  
  hmackey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Photon.Commands.Connect_Response.HmacKey)
}
#endif
inline void Connect_Response::set_hmackey(const char* value) {
  
  hmackey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Photon.Commands.Connect_Response.HmacKey)
}
inline void Connect_Response::set_hmackey(const char* value, size_t size) {
  
  hmackey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Photon.Commands.Connect_Response.HmacKey)
}
inline ::std::string* Connect_Response::mutable_hmackey() {
  
  // @@protoc_insertion_point(field_mutable:Photon.Commands.Connect_Response.HmacKey)
  return hmackey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Connect_Response::release_hmackey() {
  // @@protoc_insertion_point(field_release:Photon.Commands.Connect_Response.HmacKey)
  
  return hmackey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Connect_Response::set_allocated_hmackey(::std::string* hmackey) {
  if (hmackey != NULL) {
    
  } else {
    
  }
  hmackey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hmackey);
  // @@protoc_insertion_point(field_set_allocated:Photon.Commands.Connect_Response.HmacKey)
}

// -------------------------------------------------------------------

// Authenticate

// uint32 ChannelId = 1;
inline void Authenticate::clear_channelid() {
  channelid_ = 0u;
}
inline ::google::protobuf::uint32 Authenticate::channelid() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.Authenticate.ChannelId)
  return channelid_;
}
inline void Authenticate::set_channelid(::google::protobuf::uint32 value) {
  
  channelid_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.Authenticate.ChannelId)
}

// string AuthKey = 2;
inline void Authenticate::clear_authkey() {
  authkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Authenticate::authkey() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.Authenticate.AuthKey)
  return authkey_.GetNoArena();
}
inline void Authenticate::set_authkey(const ::std::string& value) {
  
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Photon.Commands.Authenticate.AuthKey)
}
#if LANG_CXX11
inline void Authenticate::set_authkey(::std::string&& value) {
  
  authkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Photon.Commands.Authenticate.AuthKey)
}
#endif
inline void Authenticate::set_authkey(const char* value) {
  
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Photon.Commands.Authenticate.AuthKey)
}
inline void Authenticate::set_authkey(const char* value, size_t size) {
  
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Photon.Commands.Authenticate.AuthKey)
}
inline ::std::string* Authenticate::mutable_authkey() {
  
  // @@protoc_insertion_point(field_mutable:Photon.Commands.Authenticate.AuthKey)
  return authkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Authenticate::release_authkey() {
  // @@protoc_insertion_point(field_release:Photon.Commands.Authenticate.AuthKey)
  
  return authkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Authenticate::set_allocated_authkey(::std::string* authkey) {
  if (authkey != NULL) {
    
  } else {
    
  }
  authkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authkey);
  // @@protoc_insertion_point(field_set_allocated:Photon.Commands.Authenticate.AuthKey)
}

// -------------------------------------------------------------------

// Authenticate_Response

// -------------------------------------------------------------------

// StartStream

// string VendorName = 1;
inline void StartStream::clear_vendorname() {
  vendorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartStream::vendorname() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.StartStream.VendorName)
  return vendorname_.GetNoArena();
}
inline void StartStream::set_vendorname(const ::std::string& value) {
  
  vendorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Photon.Commands.StartStream.VendorName)
}
#if LANG_CXX11
inline void StartStream::set_vendorname(::std::string&& value) {
  
  vendorname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Photon.Commands.StartStream.VendorName)
}
#endif
inline void StartStream::set_vendorname(const char* value) {
  
  vendorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Photon.Commands.StartStream.VendorName)
}
inline void StartStream::set_vendorname(const char* value, size_t size) {
  
  vendorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Photon.Commands.StartStream.VendorName)
}
inline ::std::string* StartStream::mutable_vendorname() {
  
  // @@protoc_insertion_point(field_mutable:Photon.Commands.StartStream.VendorName)
  return vendorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartStream::release_vendorname() {
  // @@protoc_insertion_point(field_release:Photon.Commands.StartStream.VendorName)
  
  return vendorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartStream::set_allocated_vendorname(::std::string* vendorname) {
  if (vendorname != NULL) {
    
  } else {
    
  }
  vendorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendorname);
  // @@protoc_insertion_point(field_set_allocated:Photon.Commands.StartStream.VendorName)
}

// string VendorVersion = 2;
inline void StartStream::clear_vendorversion() {
  vendorversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartStream::vendorversion() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.StartStream.VendorVersion)
  return vendorversion_.GetNoArena();
}
inline void StartStream::set_vendorversion(const ::std::string& value) {
  
  vendorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Photon.Commands.StartStream.VendorVersion)
}
#if LANG_CXX11
inline void StartStream::set_vendorversion(::std::string&& value) {
  
  vendorversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Photon.Commands.StartStream.VendorVersion)
}
#endif
inline void StartStream::set_vendorversion(const char* value) {
  
  vendorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Photon.Commands.StartStream.VendorVersion)
}
inline void StartStream::set_vendorversion(const char* value, size_t size) {
  
  vendorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Photon.Commands.StartStream.VendorVersion)
}
inline ::std::string* StartStream::mutable_vendorversion() {
  
  // @@protoc_insertion_point(field_mutable:Photon.Commands.StartStream.VendorVersion)
  return vendorversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartStream::release_vendorversion() {
  // @@protoc_insertion_point(field_release:Photon.Commands.StartStream.VendorVersion)
  
  return vendorversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartStream::set_allocated_vendorversion(::std::string* vendorversion) {
  if (vendorversion != NULL) {
    
  } else {
    
  }
  vendorversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendorversion);
  // @@protoc_insertion_point(field_set_allocated:Photon.Commands.StartStream.VendorVersion)
}

// bool HasVideo = 10;
inline void StartStream::clear_hasvideo() {
  hasvideo_ = false;
}
inline bool StartStream::hasvideo() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.StartStream.HasVideo)
  return hasvideo_;
}
inline void StartStream::set_hasvideo(bool value) {
  
  hasvideo_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.StartStream.HasVideo)
}

// string VideoCodec = 11;
inline void StartStream::clear_videocodec() {
  videocodec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartStream::videocodec() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.StartStream.VideoCodec)
  return videocodec_.GetNoArena();
}
inline void StartStream::set_videocodec(const ::std::string& value) {
  
  videocodec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Photon.Commands.StartStream.VideoCodec)
}
#if LANG_CXX11
inline void StartStream::set_videocodec(::std::string&& value) {
  
  videocodec_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Photon.Commands.StartStream.VideoCodec)
}
#endif
inline void StartStream::set_videocodec(const char* value) {
  
  videocodec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Photon.Commands.StartStream.VideoCodec)
}
inline void StartStream::set_videocodec(const char* value, size_t size) {
  
  videocodec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Photon.Commands.StartStream.VideoCodec)
}
inline ::std::string* StartStream::mutable_videocodec() {
  
  // @@protoc_insertion_point(field_mutable:Photon.Commands.StartStream.VideoCodec)
  return videocodec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartStream::release_videocodec() {
  // @@protoc_insertion_point(field_release:Photon.Commands.StartStream.VideoCodec)
  
  return videocodec_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartStream::set_allocated_videocodec(::std::string* videocodec) {
  if (videocodec != NULL) {
    
  } else {
    
  }
  videocodec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), videocodec);
  // @@protoc_insertion_point(field_set_allocated:Photon.Commands.StartStream.VideoCodec)
}

// uint32 VideoHeight = 12;
inline void StartStream::clear_videoheight() {
  videoheight_ = 0u;
}
inline ::google::protobuf::uint32 StartStream::videoheight() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.StartStream.VideoHeight)
  return videoheight_;
}
inline void StartStream::set_videoheight(::google::protobuf::uint32 value) {
  
  videoheight_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.StartStream.VideoHeight)
}

// uint32 VideoWidth = 13;
inline void StartStream::clear_videowidth() {
  videowidth_ = 0u;
}
inline ::google::protobuf::uint32 StartStream::videowidth() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.StartStream.VideoWidth)
  return videowidth_;
}
inline void StartStream::set_videowidth(::google::protobuf::uint32 value) {
  
  videowidth_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.StartStream.VideoWidth)
}

// uint32 VideoPayloadType = 14;
inline void StartStream::clear_videopayloadtype() {
  videopayloadtype_ = 0u;
}
inline ::google::protobuf::uint32 StartStream::videopayloadtype() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.StartStream.VideoPayloadType)
  return videopayloadtype_;
}
inline void StartStream::set_videopayloadtype(::google::protobuf::uint32 value) {
  
  videopayloadtype_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.StartStream.VideoPayloadType)
}

// uint32 VideoIngestSSRC = 15;
inline void StartStream::clear_videoingestssrc() {
  videoingestssrc_ = 0u;
}
inline ::google::protobuf::uint32 StartStream::videoingestssrc() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.StartStream.VideoIngestSSRC)
  return videoingestssrc_;
}
inline void StartStream::set_videoingestssrc(::google::protobuf::uint32 value) {
  
  videoingestssrc_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.StartStream.VideoIngestSSRC)
}

// bool HasAudio = 30;
inline void StartStream::clear_hasaudio() {
  hasaudio_ = false;
}
inline bool StartStream::hasaudio() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.StartStream.HasAudio)
  return hasaudio_;
}
inline void StartStream::set_hasaudio(bool value) {
  
  hasaudio_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.StartStream.HasAudio)
}

// string AudioCodec = 31;
inline void StartStream::clear_audiocodec() {
  audiocodec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartStream::audiocodec() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.StartStream.AudioCodec)
  return audiocodec_.GetNoArena();
}
inline void StartStream::set_audiocodec(const ::std::string& value) {
  
  audiocodec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Photon.Commands.StartStream.AudioCodec)
}
#if LANG_CXX11
inline void StartStream::set_audiocodec(::std::string&& value) {
  
  audiocodec_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Photon.Commands.StartStream.AudioCodec)
}
#endif
inline void StartStream::set_audiocodec(const char* value) {
  
  audiocodec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Photon.Commands.StartStream.AudioCodec)
}
inline void StartStream::set_audiocodec(const char* value, size_t size) {
  
  audiocodec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Photon.Commands.StartStream.AudioCodec)
}
inline ::std::string* StartStream::mutable_audiocodec() {
  
  // @@protoc_insertion_point(field_mutable:Photon.Commands.StartStream.AudioCodec)
  return audiocodec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartStream::release_audiocodec() {
  // @@protoc_insertion_point(field_release:Photon.Commands.StartStream.AudioCodec)
  
  return audiocodec_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartStream::set_allocated_audiocodec(::std::string* audiocodec) {
  if (audiocodec != NULL) {
    
  } else {
    
  }
  audiocodec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audiocodec);
  // @@protoc_insertion_point(field_set_allocated:Photon.Commands.StartStream.AudioCodec)
}

// uint32 AudioPayloadType = 32;
inline void StartStream::clear_audiopayloadtype() {
  audiopayloadtype_ = 0u;
}
inline ::google::protobuf::uint32 StartStream::audiopayloadtype() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.StartStream.AudioPayloadType)
  return audiopayloadtype_;
}
inline void StartStream::set_audiopayloadtype(::google::protobuf::uint32 value) {
  
  audiopayloadtype_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.StartStream.AudioPayloadType)
}

// uint32 AudioIngestSSRC = 33;
inline void StartStream::clear_audioingestssrc() {
  audioingestssrc_ = 0u;
}
inline ::google::protobuf::uint32 StartStream::audioingestssrc() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.StartStream.AudioIngestSSRC)
  return audioingestssrc_;
}
inline void StartStream::set_audioingestssrc(::google::protobuf::uint32 value) {
  
  audioingestssrc_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.StartStream.AudioIngestSSRC)
}

// -------------------------------------------------------------------

// StreamStart_Response

// uint32 IngestPort = 1;
inline void StreamStart_Response::clear_ingestport() {
  ingestport_ = 0u;
}
inline ::google::protobuf::uint32 StreamStart_Response::ingestport() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.StreamStart_Response.IngestPort)
  return ingestport_;
}
inline void StreamStart_Response::set_ingestport(::google::protobuf::uint32 value) {
  
  ingestport_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.StreamStart_Response.IngestPort)
}

// -------------------------------------------------------------------

// Heartbeat

// -------------------------------------------------------------------

// Heartbeat_Response

// -------------------------------------------------------------------

// Disconnect

// .Photon.Commands.DisconnectReasons Reason = 1;
inline void Disconnect::clear_reason() {
  reason_ = 0;
}
inline ::Photon::Commands::DisconnectReasons Disconnect::reason() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.Disconnect.Reason)
  return static_cast< ::Photon::Commands::DisconnectReasons >(reason_);
}
inline void Disconnect::set_reason(::Photon::Commands::DisconnectReasons value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.Disconnect.Reason)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Commands
}  // namespace Photon

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Photon::Commands::ProtocolVersion> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Photon::Commands::ProtocolVersion>() {
  return ::Photon::Commands::ProtocolVersion_descriptor();
}
template <> struct is_proto_enum< ::Photon::Commands::StatusCodes> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Photon::Commands::StatusCodes>() {
  return ::Photon::Commands::StatusCodes_descriptor();
}
template <> struct is_proto_enum< ::Photon::Commands::DisconnectReasons> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Photon::Commands::DisconnectReasons>() {
  return ::Photon::Commands::DisconnectReasons_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PhotonCommands_2eproto__INCLUDED
