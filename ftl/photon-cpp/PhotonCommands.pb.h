// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PhotonCommands.proto

#ifndef PROTOBUF_PhotonCommands_2eproto__INCLUDED
#define PROTOBUF_PhotonCommands_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
namespace Photon {
namespace Commands {
class Connect;
class ConnectDefaultTypeInternal;
extern ConnectDefaultTypeInternal _Connect_default_instance_;
class Connect_Response;
class Connect_ResponseDefaultTypeInternal;
extern Connect_ResponseDefaultTypeInternal _Connect_Response_default_instance_;
class PhotonWrapper;
class PhotonWrapperDefaultTypeInternal;
extern PhotonWrapperDefaultTypeInternal _PhotonWrapper_default_instance_;
}  // namespace Commands
}  // namespace Photon
namespace google {
namespace protobuf {
class Any;
class AnyDefaultTypeInternal;
extern AnyDefaultTypeInternal _Any_default_instance_;
}  // namespace protobuf
}  // namespace google

namespace Photon {
namespace Commands {

namespace protobuf_PhotonCommands_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_PhotonCommands_2eproto

enum ProtocolVersion {
  NONE = 0,
  V1 = 1,
  ProtocolVersion_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ProtocolVersion_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ProtocolVersion_IsValid(int value);
const ProtocolVersion ProtocolVersion_MIN = NONE;
const ProtocolVersion ProtocolVersion_MAX = V1;
const int ProtocolVersion_ARRAYSIZE = ProtocolVersion_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProtocolVersion_descriptor();
inline const ::std::string& ProtocolVersion_Name(ProtocolVersion value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProtocolVersion_descriptor(), value);
}
inline bool ProtocolVersion_Parse(
    const ::std::string& name, ProtocolVersion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtocolVersion>(
    ProtocolVersion_descriptor(), name, value);
}
enum StatusCodes {
  UNKNOWN = 0,
  OK = 200,
  PING = 201,
  BAD_REQUEST = 400,
  UNAUTHORIZED = 401,
  OLD_VERSION = 402,
  NO_RESPONSE = 403,
  AUDIO_SSRC_COLLISION = 404,
  VIDEO_SSRC_COLLISION = 405,
  INVALID_STREAM_KEY = 406,
  CHANNEL_IN_USE = 407,
  REGION_UNSUPPORTED = 408,
  NO_MEDIA_TIMEOUT = 409,
  INTERNAL_SERVER_ERROR = 500,
  INTERNAL_COMMAND_ERROR = 501,
  INTERNAL_LOCAL_ERROR = 502,
  StatusCodes_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StatusCodes_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StatusCodes_IsValid(int value);
const StatusCodes StatusCodes_MIN = UNKNOWN;
const StatusCodes StatusCodes_MAX = INTERNAL_LOCAL_ERROR;
const int StatusCodes_ARRAYSIZE = StatusCodes_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusCodes_descriptor();
inline const ::std::string& StatusCodes_Name(StatusCodes value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusCodes_descriptor(), value);
}
inline bool StatusCodes_Parse(
    const ::std::string& name, StatusCodes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusCodes>(
    StatusCodes_descriptor(), name, value);
}
// ===================================================================

class PhotonWrapper : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Photon.Commands.PhotonWrapper) */ {
 public:
  PhotonWrapper();
  virtual ~PhotonWrapper();

  PhotonWrapper(const PhotonWrapper& from);

  inline PhotonWrapper& operator=(const PhotonWrapper& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PhotonWrapper& default_instance();

  static inline const PhotonWrapper* internal_default_instance() {
    return reinterpret_cast<const PhotonWrapper*>(
               &_PhotonWrapper_default_instance_);
  }

  void Swap(PhotonWrapper* other);

  // implements Message ----------------------------------------------

  inline PhotonWrapper* New() const PROTOBUF_FINAL { return New(NULL); }

  PhotonWrapper* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PhotonWrapper& from);
  void MergeFrom(const PhotonWrapper& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PhotonWrapper* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Any Command = 15;
  bool has_command() const;
  void clear_command();
  static const int kCommandFieldNumber = 15;
  const ::google::protobuf::Any& command() const;
  ::google::protobuf::Any* mutable_command();
  ::google::protobuf::Any* release_command();
  void set_allocated_command(::google::protobuf::Any* command);

  // .Photon.Commands.StatusCodes StatusCode = 1;
  void clear_statuscode();
  static const int kStatusCodeFieldNumber = 1;
  ::Photon::Commands::StatusCodes statuscode() const;
  void set_statuscode(::Photon::Commands::StatusCodes value);

  // @@protoc_insertion_point(class_scope:Photon.Commands.PhotonWrapper)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Any* command_;
  int statuscode_;
  mutable int _cached_size_;
  friend struct  protobuf_PhotonCommands_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Connect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Photon.Commands.Connect) */ {
 public:
  Connect();
  virtual ~Connect();

  Connect(const Connect& from);

  inline Connect& operator=(const Connect& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Connect& default_instance();

  static inline const Connect* internal_default_instance() {
    return reinterpret_cast<const Connect*>(
               &_Connect_default_instance_);
  }

  void Swap(Connect* other);

  // implements Message ----------------------------------------------

  inline Connect* New() const PROTOBUF_FINAL { return New(NULL); }

  Connect* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Connect& from);
  void MergeFrom(const Connect& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Connect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ChannelID = 2;
  void clear_channelid();
  static const int kChannelIDFieldNumber = 2;
  const ::std::string& channelid() const;
  void set_channelid(const ::std::string& value);
  #if LANG_CXX11
  void set_channelid(::std::string&& value);
  #endif
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  ::std::string* mutable_channelid();
  ::std::string* release_channelid();
  void set_allocated_channelid(::std::string* channelid);

  // string AuthKey = 3;
  void clear_authkey();
  static const int kAuthKeyFieldNumber = 3;
  const ::std::string& authkey() const;
  void set_authkey(const ::std::string& value);
  #if LANG_CXX11
  void set_authkey(::std::string&& value);
  #endif
  void set_authkey(const char* value);
  void set_authkey(const char* value, size_t size);
  ::std::string* mutable_authkey();
  ::std::string* release_authkey();
  void set_allocated_authkey(::std::string* authkey);

  // .Photon.Commands.ProtocolVersion ClientProtocolVersion = 1;
  void clear_clientprotocolversion();
  static const int kClientProtocolVersionFieldNumber = 1;
  ::Photon::Commands::ProtocolVersion clientprotocolversion() const;
  void set_clientprotocolversion(::Photon::Commands::ProtocolVersion value);

  // @@protoc_insertion_point(class_scope:Photon.Commands.Connect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channelid_;
  ::google::protobuf::internal::ArenaStringPtr authkey_;
  int clientprotocolversion_;
  mutable int _cached_size_;
  friend struct  protobuf_PhotonCommands_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Connect_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Photon.Commands.Connect_Response) */ {
 public:
  Connect_Response();
  virtual ~Connect_Response();

  Connect_Response(const Connect_Response& from);

  inline Connect_Response& operator=(const Connect_Response& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Connect_Response& default_instance();

  static inline const Connect_Response* internal_default_instance() {
    return reinterpret_cast<const Connect_Response*>(
               &_Connect_Response_default_instance_);
  }

  void Swap(Connect_Response* other);

  // implements Message ----------------------------------------------

  inline Connect_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  Connect_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Connect_Response& from);
  void MergeFrom(const Connect_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Connect_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string HmacKey = 2;
  void clear_hmackey();
  static const int kHmacKeyFieldNumber = 2;
  const ::std::string& hmackey() const;
  void set_hmackey(const ::std::string& value);
  #if LANG_CXX11
  void set_hmackey(::std::string&& value);
  #endif
  void set_hmackey(const char* value);
  void set_hmackey(const char* value, size_t size);
  ::std::string* mutable_hmackey();
  ::std::string* release_hmackey();
  void set_allocated_hmackey(::std::string* hmackey);

  // .Photon.Commands.ProtocolVersion ServerProtocolVersion = 1;
  void clear_serverprotocolversion();
  static const int kServerProtocolVersionFieldNumber = 1;
  ::Photon::Commands::ProtocolVersion serverprotocolversion() const;
  void set_serverprotocolversion(::Photon::Commands::ProtocolVersion value);

  // @@protoc_insertion_point(class_scope:Photon.Commands.Connect_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hmackey_;
  int serverprotocolversion_;
  mutable int _cached_size_;
  friend struct  protobuf_PhotonCommands_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PhotonWrapper

// .Photon.Commands.StatusCodes StatusCode = 1;
inline void PhotonWrapper::clear_statuscode() {
  statuscode_ = 0;
}
inline ::Photon::Commands::StatusCodes PhotonWrapper::statuscode() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.PhotonWrapper.StatusCode)
  return static_cast< ::Photon::Commands::StatusCodes >(statuscode_);
}
inline void PhotonWrapper::set_statuscode(::Photon::Commands::StatusCodes value) {
  
  statuscode_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.PhotonWrapper.StatusCode)
}

// .google.protobuf.Any Command = 15;
inline bool PhotonWrapper::has_command() const {
  return this != internal_default_instance() && command_ != NULL;
}
inline void PhotonWrapper::clear_command() {
  if (GetArenaNoVirtual() == NULL && command_ != NULL) delete command_;
  command_ = NULL;
}
inline const ::google::protobuf::Any& PhotonWrapper::command() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.PhotonWrapper.Command)
  return command_ != NULL ? *command_
                         : *::google::protobuf::Any::internal_default_instance();
}
inline ::google::protobuf::Any* PhotonWrapper::mutable_command() {
  
  if (command_ == NULL) {
    command_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:Photon.Commands.PhotonWrapper.Command)
  return command_;
}
inline ::google::protobuf::Any* PhotonWrapper::release_command() {
  // @@protoc_insertion_point(field_release:Photon.Commands.PhotonWrapper.Command)
  
  ::google::protobuf::Any* temp = command_;
  command_ = NULL;
  return temp;
}
inline void PhotonWrapper::set_allocated_command(::google::protobuf::Any* command) {
  delete command_;
  command_ = command;
  if (command) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Photon.Commands.PhotonWrapper.Command)
}

// -------------------------------------------------------------------

// Connect

// .Photon.Commands.ProtocolVersion ClientProtocolVersion = 1;
inline void Connect::clear_clientprotocolversion() {
  clientprotocolversion_ = 0;
}
inline ::Photon::Commands::ProtocolVersion Connect::clientprotocolversion() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.Connect.ClientProtocolVersion)
  return static_cast< ::Photon::Commands::ProtocolVersion >(clientprotocolversion_);
}
inline void Connect::set_clientprotocolversion(::Photon::Commands::ProtocolVersion value) {
  
  clientprotocolversion_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.Connect.ClientProtocolVersion)
}

// string ChannelID = 2;
inline void Connect::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Connect::channelid() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.Connect.ChannelID)
  return channelid_.GetNoArena();
}
inline void Connect::set_channelid(const ::std::string& value) {
  
  channelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Photon.Commands.Connect.ChannelID)
}
#if LANG_CXX11
inline void Connect::set_channelid(::std::string&& value) {
  
  channelid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Photon.Commands.Connect.ChannelID)
}
#endif
inline void Connect::set_channelid(const char* value) {
  
  channelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Photon.Commands.Connect.ChannelID)
}
inline void Connect::set_channelid(const char* value, size_t size) {
  
  channelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Photon.Commands.Connect.ChannelID)
}
inline ::std::string* Connect::mutable_channelid() {
  
  // @@protoc_insertion_point(field_mutable:Photon.Commands.Connect.ChannelID)
  return channelid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Connect::release_channelid() {
  // @@protoc_insertion_point(field_release:Photon.Commands.Connect.ChannelID)
  
  return channelid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Connect::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    
  } else {
    
  }
  channelid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:Photon.Commands.Connect.ChannelID)
}

// string AuthKey = 3;
inline void Connect::clear_authkey() {
  authkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Connect::authkey() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.Connect.AuthKey)
  return authkey_.GetNoArena();
}
inline void Connect::set_authkey(const ::std::string& value) {
  
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Photon.Commands.Connect.AuthKey)
}
#if LANG_CXX11
inline void Connect::set_authkey(::std::string&& value) {
  
  authkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Photon.Commands.Connect.AuthKey)
}
#endif
inline void Connect::set_authkey(const char* value) {
  
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Photon.Commands.Connect.AuthKey)
}
inline void Connect::set_authkey(const char* value, size_t size) {
  
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Photon.Commands.Connect.AuthKey)
}
inline ::std::string* Connect::mutable_authkey() {
  
  // @@protoc_insertion_point(field_mutable:Photon.Commands.Connect.AuthKey)
  return authkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Connect::release_authkey() {
  // @@protoc_insertion_point(field_release:Photon.Commands.Connect.AuthKey)
  
  return authkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Connect::set_allocated_authkey(::std::string* authkey) {
  if (authkey != NULL) {
    
  } else {
    
  }
  authkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authkey);
  // @@protoc_insertion_point(field_set_allocated:Photon.Commands.Connect.AuthKey)
}

// -------------------------------------------------------------------

// Connect_Response

// .Photon.Commands.ProtocolVersion ServerProtocolVersion = 1;
inline void Connect_Response::clear_serverprotocolversion() {
  serverprotocolversion_ = 0;
}
inline ::Photon::Commands::ProtocolVersion Connect_Response::serverprotocolversion() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.Connect_Response.ServerProtocolVersion)
  return static_cast< ::Photon::Commands::ProtocolVersion >(serverprotocolversion_);
}
inline void Connect_Response::set_serverprotocolversion(::Photon::Commands::ProtocolVersion value) {
  
  serverprotocolversion_ = value;
  // @@protoc_insertion_point(field_set:Photon.Commands.Connect_Response.ServerProtocolVersion)
}

// string HmacKey = 2;
inline void Connect_Response::clear_hmackey() {
  hmackey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Connect_Response::hmackey() const {
  // @@protoc_insertion_point(field_get:Photon.Commands.Connect_Response.HmacKey)
  return hmackey_.GetNoArena();
}
inline void Connect_Response::set_hmackey(const ::std::string& value) {
  
  hmackey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Photon.Commands.Connect_Response.HmacKey)
}
#if LANG_CXX11
inline void Connect_Response::set_hmackey(::std::string&& value) {
  
  hmackey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Photon.Commands.Connect_Response.HmacKey)
}
#endif
inline void Connect_Response::set_hmackey(const char* value) {
  
  hmackey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Photon.Commands.Connect_Response.HmacKey)
}
inline void Connect_Response::set_hmackey(const char* value, size_t size) {
  
  hmackey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Photon.Commands.Connect_Response.HmacKey)
}
inline ::std::string* Connect_Response::mutable_hmackey() {
  
  // @@protoc_insertion_point(field_mutable:Photon.Commands.Connect_Response.HmacKey)
  return hmackey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Connect_Response::release_hmackey() {
  // @@protoc_insertion_point(field_release:Photon.Commands.Connect_Response.HmacKey)
  
  return hmackey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Connect_Response::set_allocated_hmackey(::std::string* hmackey) {
  if (hmackey != NULL) {
    
  } else {
    
  }
  hmackey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hmackey);
  // @@protoc_insertion_point(field_set_allocated:Photon.Commands.Connect_Response.HmacKey)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Commands
}  // namespace Photon

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Photon::Commands::ProtocolVersion> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Photon::Commands::ProtocolVersion>() {
  return ::Photon::Commands::ProtocolVersion_descriptor();
}
template <> struct is_proto_enum< ::Photon::Commands::StatusCodes> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Photon::Commands::StatusCodes>() {
  return ::Photon::Commands::StatusCodes_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PhotonCommands_2eproto__INCLUDED
